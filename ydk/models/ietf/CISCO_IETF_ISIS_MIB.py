""" CISCO_IETF_ISIS_MIB 

This document describes a management information base for
the IS\-IS Routing protocol, as described in ISO 10589,
when it is used to construct routing tables for IP networks,
as described in RFC 1195. This MIB is entirely based upon
the IETF draft draft\-ietf\-isis\-wg\-mib\-16.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYDataValidationError


from ydk.models.inet.INET_ADDRESS_MIB import InetAddressType_Enum
from ydk.models.snmpv2.SNMPv2_TC import RowStatus_Enum

class CiiAdminState_Enum(Enum):
    """
    CiiAdminState_Enum

    Type used in enabling and disabling a row.
    Values match those in RFC 2863.

    """

    ON = 1

    OFF = 2


    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
        return meta._meta_table['CiiAdminState_Enum']


class CiiISLevel_Enum(Enum):
    """
    CiiISLevel_Enum

    Identifies a level.

    """

    NONE = 0

    AREA = 1

    DOMAIN = 2


    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
        return meta._meta_table['CiiISLevel_Enum']


class CiiLevelState_Enum(Enum):
    """
    CiiLevelState_Enum

    States of the IS\-IS protocol.

    """

    OFF = 1

    ON = 2

    WAITING = 3

    OVERLOADED = 4


    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
        return meta._meta_table['CiiLevelState_Enum']


class CiiMetricStyle_Enum(Enum):
    """
    CiiMetricStyle_Enum

    Do we use 1195 style Metrics or wide metrics.

    """

    NARROW = 1

    WIDE = 2

    BOTH = 3


    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
        return meta._meta_table['CiiMetricStyle_Enum']


class CiiMetricType_Enum(Enum):
    """
    CiiMetricType_Enum

    Is this an Internal or External Metric?

    """

    INTERNAL = 1

    EXTERNAL = 2


    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
        return meta._meta_table['CiiMetricType_Enum']


class CiiSupportedProtocol_Enum(Enum):
    """
    CiiSupportedProtocol_Enum

    Types of network protocol supported by Integrated IS\-IS.
    The values for ISO8473 and IP are those registered for
    these protocols in ISO TR9577.

    """

    ISO8473 = 129

    IPV6 = 142

    IP = 204


    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
        return meta._meta_table['CiiSupportedProtocol_Enum']



class CISCOIETFISISMIB(object):
    """
    
    
    .. attribute:: ciiareaaddrtable
    
    	The union of the sets of area addresses reported in all Level 1 LSPs with fragment number zero generated by this Intermediate System, or received from other Intermediate Systems which are reachable via Level 1 routing
    	**type**\: :py:class:`CiiAreaAddrTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiAreaAddrTable>`
    
    .. attribute:: ciicirc
    
    	
    	**type**\: :py:class:`CiiCirc <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCirc>`
    
    .. attribute:: ciicircleveltable
    
    	Level specific information about circuits used by IS\-IS
    	**type**\: :py:class:`CiiCircLevelTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircLevelTable>`
    
    .. attribute:: ciicirctable
    
    	The table of circuits used by this Intermediate System
    	**type**\: :py:class:`CiiCircTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable>`
    
    .. attribute:: ciicircuitcountertable
    
    	Circuit specific counters for this Intermediate System
    	**type**\: :py:class:`CiiCircuitCounterTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircuitCounterTable>`
    
    .. attribute:: ciiipratable
    
    	The table of IP Reachable Addresses to networks, subnetworks or hosts either manually configured or learned from another protocol
    	**type**\: :py:class:`CiiIPRATable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiIPRATable>`
    
    .. attribute:: ciiisadjareaaddrtable
    
    	This table contains the set of Area Addresses of neighboring Intermediate Systems as reported in received IIH PDUs
    	**type**\: :py:class:`CiiISAdjAreaAddrTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjAreaAddrTable>`
    
    .. attribute:: ciiisadjipaddrtable
    
    	This table contains the set of IP Addresses of neighboring Intermediate Systems as reported in received IIH PDUs
    	**type**\: :py:class:`CiiISAdjIPAddrTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjIPAddrTable>`
    
    .. attribute:: ciiisadjprotsupptable
    
    	This table contains the set of protocols supported by neighboring Intermediate Systems as reported in received IIH PDUs
    	**type**\: :py:class:`CiiISAdjProtSuppTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjProtSuppTable>`
    
    .. attribute:: ciiisadjtable
    
    	The table of adjacencies to Intermediate Systems
    	**type**\: :py:class:`CiiISAdjTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable>`
    
    .. attribute:: ciilspsummarytable
    
    	The table of LSP Headers
    	**type**\: :py:class:`CiiLSPSummaryTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiLSPSummaryTable>`
    
    .. attribute:: ciilsptlvtable
    
    	The contents of each LSP
    	**type**\: :py:class:`CiiLSPTLVTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiLSPTLVTable>`
    
    .. attribute:: ciimanareaaddrtable
    
    	The set of manual area addresses configured on this Intermediate System
    	**type**\: :py:class:`CiiManAreaAddrTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiManAreaAddrTable>`
    
    .. attribute:: ciipacketcountertable
    
    	Information about IS\-IS protocol traffic at one level on one circuit in one direction
    	**type**\: :py:class:`CiiPacketCounterTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiPacketCounterTable>`
    
    .. attribute:: ciiratable
    
    	The table of Reachable Addresses to NSAPs or Address Prefixes
    	**type**\: :py:class:`CiiRATable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRATable>`
    
    .. attribute:: ciiredistributeaddrtable
    
    	This table provides criteria to decide if a route should be leaked from L2 to L1 when Domain Wide Prefix leaking is enabled.  Addresses that match the summary mask in the table will be announced at L1 by routers when ciiSysL2toL1Leaking is enabled.  Routes that fall into the ranges specified are announced as is, without being summarized.  Routes that do not match a summary mask are not announced
    	**type**\: :py:class:`CiiRedistributeAddrTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRedistributeAddrTable>`
    
    .. attribute:: ciiroutertable
    
    	The set of hostnames and router ID
    	**type**\: :py:class:`CiiRouterTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRouterTable>`
    
    .. attribute:: ciisummaddrtable
    
    	The set of IP summary addresses to use in forming summary TLVs originated by this Intermediate System.  An administrator may use a summary address to combine and modify IP Reachability announcements.  If the Intermediate system can reach any subset of the summary address, the summary address will be announced instead, at the configured metric
    	**type**\: :py:class:`CiiSummAddrTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSummAddrTable>`
    
    .. attribute:: ciisysleveltable
    
    	Level specific information about the System
    	**type**\: :py:class:`CiiSysLevelTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysLevelTable>`
    
    .. attribute:: ciisysobject
    
    	
    	**type**\: :py:class:`CiiSysObject <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysObject>`
    
    .. attribute:: ciisysprotsupptable
    
    	This table contains the manually configured set of protocols supported by this Intermediate System
    	**type**\: :py:class:`CiiSysProtSuppTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysProtSuppTable>`
    
    .. attribute:: ciisystemcountertable
    
    	System wide counters for this Intermediate System
    	**type**\: :py:class:`CiiSystemCounterTable <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSystemCounterTable>`
    
    

    """

    _prefix = 'cisco-ietf'
    _revision = '2005-08-16'

    def __init__(self):
        self.ciiareaaddrtable = CISCOIETFISISMIB.CiiAreaAddrTable()
        self.ciiareaaddrtable.parent = self
        self.ciicirc = CISCOIETFISISMIB.CiiCirc()
        self.ciicirc.parent = self
        self.ciicircleveltable = CISCOIETFISISMIB.CiiCircLevelTable()
        self.ciicircleveltable.parent = self
        self.ciicirctable = CISCOIETFISISMIB.CiiCircTable()
        self.ciicirctable.parent = self
        self.ciicircuitcountertable = CISCOIETFISISMIB.CiiCircuitCounterTable()
        self.ciicircuitcountertable.parent = self
        self.ciiipratable = CISCOIETFISISMIB.CiiIPRATable()
        self.ciiipratable.parent = self
        self.ciiisadjareaaddrtable = CISCOIETFISISMIB.CiiISAdjAreaAddrTable()
        self.ciiisadjareaaddrtable.parent = self
        self.ciiisadjipaddrtable = CISCOIETFISISMIB.CiiISAdjIPAddrTable()
        self.ciiisadjipaddrtable.parent = self
        self.ciiisadjprotsupptable = CISCOIETFISISMIB.CiiISAdjProtSuppTable()
        self.ciiisadjprotsupptable.parent = self
        self.ciiisadjtable = CISCOIETFISISMIB.CiiISAdjTable()
        self.ciiisadjtable.parent = self
        self.ciilspsummarytable = CISCOIETFISISMIB.CiiLSPSummaryTable()
        self.ciilspsummarytable.parent = self
        self.ciilsptlvtable = CISCOIETFISISMIB.CiiLSPTLVTable()
        self.ciilsptlvtable.parent = self
        self.ciimanareaaddrtable = CISCOIETFISISMIB.CiiManAreaAddrTable()
        self.ciimanareaaddrtable.parent = self
        self.ciipacketcountertable = CISCOIETFISISMIB.CiiPacketCounterTable()
        self.ciipacketcountertable.parent = self
        self.ciiratable = CISCOIETFISISMIB.CiiRATable()
        self.ciiratable.parent = self
        self.ciiredistributeaddrtable = CISCOIETFISISMIB.CiiRedistributeAddrTable()
        self.ciiredistributeaddrtable.parent = self
        self.ciiroutertable = CISCOIETFISISMIB.CiiRouterTable()
        self.ciiroutertable.parent = self
        self.ciisummaddrtable = CISCOIETFISISMIB.CiiSummAddrTable()
        self.ciisummaddrtable.parent = self
        self.ciisysleveltable = CISCOIETFISISMIB.CiiSysLevelTable()
        self.ciisysleveltable.parent = self
        self.ciisysobject = CISCOIETFISISMIB.CiiSysObject()
        self.ciisysobject.parent = self
        self.ciisysprotsupptable = CISCOIETFISISMIB.CiiSysProtSuppTable()
        self.ciisysprotsupptable.parent = self
        self.ciisystemcountertable = CISCOIETFISISMIB.CiiSystemCounterTable()
        self.ciisystemcountertable.parent = self


    class CiiAreaAddrTable(object):
        """
        The union of the sets of area addresses reported in all
        Level 1 LSPs with fragment number zero generated by this
        Intermediate System, or received from other Intermediate
        Systems which are reachable via Level 1 routing.
        
        .. attribute:: ciiareaaddrentry
        
        	Each entry contains one area address reported in a Level 1 LSP generated or received by this Intermediate System
        	**type**\: list of :py:class:`CiiAreaAddrEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiAreaAddrTable.CiiAreaAddrEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciiareaaddrentry = YList()
            self.ciiareaaddrentry.parent = self
            self.ciiareaaddrentry.name = 'ciiareaaddrentry'


        class CiiAreaAddrEntry(object):
            """
            Each entry contains one area address reported in a
            Level 1 LSP generated or received by this Intermediate
            System.
            
            .. attribute:: ciiareaaddr
            
            	An area address reported in a Level 1 LSP
            	**type**\: str
            
            	**range:** 0..20
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciiareaaddr = None

            @property
            def _common_path(self):
                if self.ciiareaaddr is None:
                    raise YPYDataValidationError('Key property ciiareaaddr is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiAreaAddrTable/CISCO-IETF-ISIS-MIB:ciiAreaAddrEntry[CISCO-IETF-ISIS-MIB:ciiAreaAddr = ' + str(self.ciiareaaddr) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciiareaaddr is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiAreaAddrTable.CiiAreaAddrEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiAreaAddrTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciiareaaddrentry is not None:
                for child_ref in self.ciiareaaddrentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiAreaAddrTable']['meta_info']


    class CiiCirc(object):
        """
        
        
        .. attribute:: ciinextcircindex
        
        	This object is used to assign values to ciiCircIndex as described in 'Textual Conventions for SNMPv2'.  The network manager reads this object, and then writes the value back as the ciiCircIndex in a SET that creates a new instance of ciiCircEntry.  If the SET fails with the code 'inconsistentValue', then the process must be repeated; If the SET succeeds, then the object is incremented, and the new ciiCircEntry is created according to the manager's directions
        	**type**\: int
        
        	**range:** 0..4294967295
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciinextcircindex = None

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiCirc'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciinextcircindex is not None:
                return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiCirc']['meta_info']


    class CiiCircLevelTable(object):
        """
        Level specific information about circuits used by IS\-IS
        
        .. attribute:: ciicirclevelentry
        
        	An ciiCircLevelEntry exists for each level on each circuit used by Integrated IS\-IS on this system
        	**type**\: list of :py:class:`CiiCircLevelEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircLevelTable.CiiCircLevelEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciicirclevelentry = YList()
            self.ciicirclevelentry.parent = self
            self.ciicirclevelentry.name = 'ciicirclevelentry'


        class CiiCircLevelEntry(object):
            """
            An ciiCircLevelEntry exists for each level on
            each circuit used by Integrated IS\-IS on this system.
            
            .. attribute:: ciicircindex
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            .. attribute:: ciicirclevelindex
            
            	The level that this entry describes
            	**type**\: :py:class:`CiiCircLevelIndex_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircLevelTable.CiiCircLevelEntry.CiiCircLevelIndex_Enum>`
            
            .. attribute:: ciicirclevelcsnpinterval
            
            	Interval of time, in seconds, between periodic transmission of a complete set of CSNPs on multiaccess networks if this router is the designated router at this level.  This object follows the resettingTimer behavior
            	**type**\: int
            
            	**range:** 1..600
            
            .. attribute:: ciicircleveldesis
            
            	The ID of the LAN Designated Intermediate System on this circuit at this level. If, for any reason, this system is not partaking in the relevant Designated Intermediate System election process, then the value returned is the zero length OCTET STRING
            	**type**\: str
            
            	**range:** 0 \| 7
            
            .. attribute:: ciicircleveldrhellotimer
            
            	Period, in milliseconds, between Hello PDUs on multiaccess networks when this IS is the Designated Intermediate System.  This object follows the resettingTimer behavior
            	**type**\: int
            
            	**range:** 10..120000
            
            .. attribute:: ciicirclevelhellomultiplier
            
            	This value is multiplied by the corresponding HelloTimer and the result in seconds (rounded up) is used as the holding time in transmitted hellos, to be used by receivers of hello packets from this IS
            	**type**\: int
            
            	**range:** 2..100
            
            .. attribute:: ciicirclevelhellotimer
            
            	Maximum period, in milliseconds, between IIH PDUs on multiaccess networks at this level for LANs. The value at L1 is used as the period between Hellos on L1L2 point to point circuits.  Setting this value at level 2 on an L1L2 point to point circuit will result in an error of InconsistentValue.  This object follows the resettingTimer behavior
            	**type**\: int
            
            	**range:** 10..600000
            
            .. attribute:: ciicirclevelid
            
            	On a point to point circuit with a fully initialized adjacency to a peer IS, the value of this object is the circuit ID negotiated during adjacency initialization. On a point to point circuit without such an adjacency, the value is the concatenation of the local system ID and the one byte ciiCircLevelIDOctet for this circuit i.e. the value that would be proposed for the circuit ID.  On other circuit types, the value returned is the zero length OCTET STRING
            	**type**\: str
            
            	**range:** 0 \| 7
            
            .. attribute:: ciicirclevelidoctet
            
            	A one byte identifier that can be used in protocol packets to identify a circuit.  Values of ciiCircLevelIDOctet do not need to be unique.  They are only required to differ on LANs where the Intermediate System is the Designated Intermediate System
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: ciicirclevelispriority
            
            	The priority for becoming LAN Designated Intermediate System at this level
            	**type**\: int
            
            	**range:** 0..127
            
            .. attribute:: ciicirclevellspthrottle
            
            	Minimal interval of time, in milliseconds, between transmissions of LSPs on an interface at this level
            	**type**\: int
            
            	**range:** 1..65535
            
            .. attribute:: ciicirclevelmetric
            
            	The metric value of this circuit for this level
            	**type**\: int
            
            	**range:** 0..63
            
            .. attribute:: ciicirclevelminlspretransint
            
            	Minimum interval, in seconds, between re\-transmission of an LSP at this level. This object follows the resettingTimer behavior.  Note that ciiCircLevelLSPThrottle controls how fast we send back to back LSPs.  This variable controls how fast we re\-send the same LSP
            	**type**\: int
            
            	**range:** 1..300
            
            .. attribute:: ciicirclevelpartsnpinterval
            
            	Minimum interval in seconds between sending Partial Sequence Number PDUs at this level. This object follows the resettingTimer behavior
            	**type**\: int
            
            	**range:** 1..120
            
            .. attribute:: ciicirclevelwidemetric
            
            	The wide metric value of this circuit for this level
            	**type**\: int
            
            	**range:** 0..16777215
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciicircindex = None
                self.ciicirclevelindex = None
                self.ciicirclevelcsnpinterval = None
                self.ciicircleveldesis = None
                self.ciicircleveldrhellotimer = None
                self.ciicirclevelhellomultiplier = None
                self.ciicirclevelhellotimer = None
                self.ciicirclevelid = None
                self.ciicirclevelidoctet = None
                self.ciicirclevelispriority = None
                self.ciicirclevellspthrottle = None
                self.ciicirclevelmetric = None
                self.ciicirclevelminlspretransint = None
                self.ciicirclevelpartsnpinterval = None
                self.ciicirclevelwidemetric = None

            class CiiCircLevelIndex_Enum(Enum):
                """
                CiiCircLevelIndex_Enum

                The level that this entry describes.

                """

                LEVEL1IS = 1

                LEVEL2IS = 2


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiCircLevelTable.CiiCircLevelEntry.CiiCircLevelIndex_Enum']


            @property
            def _common_path(self):
                if self.ciicircindex is None:
                    raise YPYDataValidationError('Key property ciicircindex is None')
                if self.ciicirclevelindex is None:
                    raise YPYDataValidationError('Key property ciicirclevelindex is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiCircLevelTable/CISCO-IETF-ISIS-MIB:ciiCircLevelEntry[CISCO-IETF-ISIS-MIB:ciiCircIndex = ' + str(self.ciicircindex) + '][CISCO-IETF-ISIS-MIB:ciiCircLevelIndex = ' + str(self.ciicirclevelindex) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciicircindex is not None:
                    return True

                if self.ciicirclevelindex is not None:
                    return True

                if self.ciicirclevelcsnpinterval is not None:
                    return True

                if self.ciicircleveldesis is not None:
                    return True

                if self.ciicircleveldrhellotimer is not None:
                    return True

                if self.ciicirclevelhellomultiplier is not None:
                    return True

                if self.ciicirclevelhellotimer is not None:
                    return True

                if self.ciicirclevelid is not None:
                    return True

                if self.ciicirclevelidoctet is not None:
                    return True

                if self.ciicirclevelispriority is not None:
                    return True

                if self.ciicirclevellspthrottle is not None:
                    return True

                if self.ciicirclevelmetric is not None:
                    return True

                if self.ciicirclevelminlspretransint is not None:
                    return True

                if self.ciicirclevelpartsnpinterval is not None:
                    return True

                if self.ciicirclevelwidemetric is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiCircLevelTable.CiiCircLevelEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiCircLevelTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciicirclevelentry is not None:
                for child_ref in self.ciicirclevelentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiCircLevelTable']['meta_info']


    class CiiCircTable(object):
        """
        The table of circuits used by this
        Intermediate System.
        
        .. attribute:: ciicircentry
        
        	An ciiCircEntry exists for each circuit used by Integrated IS\-IS on this system
        	**type**\: list of :py:class:`CiiCircEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciicircentry = YList()
            self.ciicircentry.parent = self
            self.ciicircentry.name = 'ciicircentry'


        class CiiCircEntry(object):
            """
            An ciiCircEntry exists for each circuit used by
            Integrated IS\-IS on this system.
            
            .. attribute:: ciicircindex
            
            	The identifier of this circuit, unique within the Intermediate System.  This object follows the index behavior.  This is for SNMP Indexing purposes only and need not have any relation to any protocol value
            	**type**\: int
            
            	**range:** 1..2147483647
            
            .. attribute:: ciicirc3wayenabled
            
            	Is this circuit enabled to run 3Way handshake?
            	**type**\: bool
            
            .. attribute:: ciicircadminstate
            
            	The administrative state of the circuit. This object follows the CiiAdminState behavior
            	**type**\: :py:class:`CiiAdminState_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiAdminState_Enum>`
            
            .. attribute:: ciicircexiststate
            
            	The existence state of this circuit. This object follows the RowStatus behavior.  Setting the state to 'notInService' halts the generation and processing of IS\-IS protocol PDUs on this circuit.  Setting the state to 'destroy' will also erase any configuration associated with the circuit
            	**type**\: :py:class:`RowStatus_Enum <ydk.models.snmpv2.SNMPv2_TC.RowStatus_Enum>`
            
            .. attribute:: ciicircextdomain
            
            	If true, suppress normal transmission of and interpretation of Intra\-domain IS\-IS PDUs on this circuit
            	**type**\: bool
            
            .. attribute:: ciicircextendedcircid
            
            	The value to be used as the extended circuit ID in 3Way handshake.  This value is only used if ciiCirc3WayEnabled is true, and must be unique across all circuits on this IS
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciicircifindex
            
            	The value of ifIndex for the interface to which this circuit corresponds.   This object cannot be modified after creation
            	**type**\: int
            
            	**range:** 1..2147483647
            
            .. attribute:: ciicircifsubindex
            
            	A specifier for the part of the interface ifIndex to which this circuit corresponds, such as a DLCI or VPI/VCI. This object cannot be modified after creation
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: ciicirclastuptime
            
            	If the circuit is enabled, the value of sysUpTime when ciiCircAdminState most recently entered the state 'on'.  If the circuit is not 'on', the value of sysUpTime when the circuit last entered state 'on', 0 if the circuit has never been 'on'
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciicirclevel
            
            	Indicates which type of packets will be sent and accepted on this circuit. The values used will be modified by the settings of ciiSysType. This object follows the replaceOnlyWhileDisabled behavior
            	**type**\: :py:class:`CiiCircLevel_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry.CiiCircLevel_Enum>`
            
            .. attribute:: ciicircmeshgroup
            
            	Circuits in the same mesh group act as a virtual multiaccess network.  LSPs seen on one circuit in a mesh group will not be flooded to another circuit in the same mesh group.  If ciiCircMeshGroupEnabled is inactive or blocked, this value is ignored
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciicircmeshgroupenabled
            
            	Is this port a member of a mesh group, or blocked? Circuits in the same mesh group act as a virtual multiaccess network.  LSPs seen on one circuit in a mesh group will not be flooded to another circuit in the same mesh group
            	**type**\: :py:class:`CiiCircMeshGroupEnabled_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry.CiiCircMeshGroupEnabled_Enum>`
            
            .. attribute:: ciicircpassivecircuit
            
            	Should we include this interface in LSPs, even if it is not running the IS\-IS Protocol?
            	**type**\: bool
            
            .. attribute:: ciicircsmallhellos
            
            	Can we send unpadded hellos on LAN circuits?  'false' means LAN Hellos must be padded. Implementations should allow the administrator to read this value.  An implementation need not be able to support unpadded hellos to be conformant
            	**type**\: bool
            
            .. attribute:: ciicirctype
            
            	The type of the circuit. This object follows the replaceOnlyWhileDisabled behavior. The type specified must be compatible with the type of the interface defined by the value of ciiCircIfIndex
            	**type**\: :py:class:`CiiCircType_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircTable.CiiCircEntry.CiiCircType_Enum>`
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciicircindex = None
                self.ciicirc3wayenabled = None
                self.ciicircadminstate = None
                self.ciicircexiststate = None
                self.ciicircextdomain = None
                self.ciicircextendedcircid = None
                self.ciicircifindex = None
                self.ciicircifsubindex = None
                self.ciicirclastuptime = None
                self.ciicirclevel = None
                self.ciicircmeshgroup = None
                self.ciicircmeshgroupenabled = None
                self.ciicircpassivecircuit = None
                self.ciicircsmallhellos = None
                self.ciicirctype = None

            class CiiCircLevel_Enum(Enum):
                """
                CiiCircLevel_Enum

                Indicates which type of packets will be sent and
                accepted on this circuit. The values used will be
                modified by the settings of ciiSysType. This
                object follows the replaceOnlyWhileDisabled behavior.

                """

                LEVEL1 = 1

                LEVEL2 = 2

                LEVEL1L2 = 3


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiCircTable.CiiCircEntry.CiiCircLevel_Enum']


            class CiiCircMeshGroupEnabled_Enum(Enum):
                """
                CiiCircMeshGroupEnabled_Enum

                Is this port a member of a mesh group, or blocked?
                Circuits in the same mesh group act as a virtual
                multiaccess network.  LSPs seen on one circuit in
                a mesh group will not be flooded to another circuit
                in the same mesh group.

                """

                INACTIVE = 1

                BLOCKED = 2

                SET = 3


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiCircTable.CiiCircEntry.CiiCircMeshGroupEnabled_Enum']


            class CiiCircType_Enum(Enum):
                """
                CiiCircType_Enum

                The type of the circuit. This object follows the
                replaceOnlyWhileDisabled behavior. The type specified
                must be compatible with the type of the interface defined
                by the value of ciiCircIfIndex.

                """

                BROADCAST = 1

                PTTOPT = 2

                STATICIN = 3

                STATICOUT = 4

                DA = 5


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiCircTable.CiiCircEntry.CiiCircType_Enum']


            @property
            def _common_path(self):
                if self.ciicircindex is None:
                    raise YPYDataValidationError('Key property ciicircindex is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiCircTable/CISCO-IETF-ISIS-MIB:ciiCircEntry[CISCO-IETF-ISIS-MIB:ciiCircIndex = ' + str(self.ciicircindex) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciicircindex is not None:
                    return True

                if self.ciicirc3wayenabled is not None:
                    return True

                if self.ciicircadminstate is not None:
                    return True

                if self.ciicircexiststate is not None:
                    return True

                if self.ciicircextdomain is not None:
                    return True

                if self.ciicircextendedcircid is not None:
                    return True

                if self.ciicircifindex is not None:
                    return True

                if self.ciicircifsubindex is not None:
                    return True

                if self.ciicirclastuptime is not None:
                    return True

                if self.ciicirclevel is not None:
                    return True

                if self.ciicircmeshgroup is not None:
                    return True

                if self.ciicircmeshgroupenabled is not None:
                    return True

                if self.ciicircpassivecircuit is not None:
                    return True

                if self.ciicircsmallhellos is not None:
                    return True

                if self.ciicirctype is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiCircTable.CiiCircEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiCircTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciicircentry is not None:
                for child_ref in self.ciicircentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiCircTable']['meta_info']


    class CiiCircuitCounterTable(object):
        """
        Circuit specific counters for this
        Intermediate System.
        
        .. attribute:: ciicircuitcounterentry
        
        	An ciiCircuitCounterEntry exists for each circuit used by Integrated IS\-IS on this system
        	**type**\: list of :py:class:`CiiCircuitCounterEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircuitCounterTable.CiiCircuitCounterEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciicircuitcounterentry = YList()
            self.ciicircuitcounterentry.parent = self
            self.ciicircuitcounterentry.name = 'ciicircuitcounterentry'


        class CiiCircuitCounterEntry(object):
            """
            An ciiCircuitCounterEntry exists for each circuit
            used by Integrated IS\-IS on this system.
            
            .. attribute:: ciicircindex
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            .. attribute:: ciicircuittype
            
            	What type of circuit saw these counts?  The point to point Hello PDU includes both L1 and L2, and ISs form a single adjacency on point to point links. Thus we combine counts on point to point links into one group
            	**type**\: :py:class:`CiiCircuitType_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiCircuitCounterTable.CiiCircuitCounterEntry.CiiCircuitType_Enum>`
            
            .. attribute:: ciicircadjchanges
            
            	The number of times an adjacency state change has occurred on this circuit
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciicircauthfails
            
            	The number of times an IS\-IS control PDU with the correct auth type has failed to pass authentication validation
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciicircauthtypefails
            
            	The number of times an IS\-IS control PDU with an auth type field different to that for this system has been received
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciicircidfieldlenmismatches
            
            	The number of times an IS\-IS control PDU with an ID field length different to that for this system has been received
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciicircinitfails
            
            	The number of times initialization of this circuit has failed.  This counts events such as PPP NCP failures. Failures to form an adjacency are counted by ciiCircRejAdjs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciicirclandesischanges
            
            	The number of times the Designated IS has changed on this circuit at this level.  If the circuit is point to point, this count is zero
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciicircmaxareaaddrmismatches
            
            	The number of times an IS\-IS control PDU with a max area address field different to that for this system has been received
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciicircnumadj
            
            	The number of adjacencies on this circuit
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciicircrejadjs
            
            	The number of times an adjacency has been rejected on this circuit
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciicircindex = None
                self.ciicircuittype = None
                self.ciicircadjchanges = None
                self.ciicircauthfails = None
                self.ciicircauthtypefails = None
                self.ciicircidfieldlenmismatches = None
                self.ciicircinitfails = None
                self.ciicirclandesischanges = None
                self.ciicircmaxareaaddrmismatches = None
                self.ciicircnumadj = None
                self.ciicircrejadjs = None

            class CiiCircuitType_Enum(Enum):
                """
                CiiCircuitType_Enum

                What type of circuit saw these counts?
                
                The point to point Hello PDU includes
                both L1 and L2, and ISs form a single
                adjacency on point to point links.
                Thus we combine counts on
                point to point links into one group.

                """

                LANLEVEL1 = 1

                LANLEVEL2 = 2

                P2PCIRCUIT = 3


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiCircuitCounterTable.CiiCircuitCounterEntry.CiiCircuitType_Enum']


            @property
            def _common_path(self):
                if self.ciicircindex is None:
                    raise YPYDataValidationError('Key property ciicircindex is None')
                if self.ciicircuittype is None:
                    raise YPYDataValidationError('Key property ciicircuittype is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiCircuitCounterTable/CISCO-IETF-ISIS-MIB:ciiCircuitCounterEntry[CISCO-IETF-ISIS-MIB:ciiCircIndex = ' + str(self.ciicircindex) + '][CISCO-IETF-ISIS-MIB:ciiCircuitType = ' + str(self.ciicircuittype) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciicircindex is not None:
                    return True

                if self.ciicircuittype is not None:
                    return True

                if self.ciicircadjchanges is not None:
                    return True

                if self.ciicircauthfails is not None:
                    return True

                if self.ciicircauthtypefails is not None:
                    return True

                if self.ciicircidfieldlenmismatches is not None:
                    return True

                if self.ciicircinitfails is not None:
                    return True

                if self.ciicirclandesischanges is not None:
                    return True

                if self.ciicircmaxareaaddrmismatches is not None:
                    return True

                if self.ciicircnumadj is not None:
                    return True

                if self.ciicircrejadjs is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiCircuitCounterTable.CiiCircuitCounterEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiCircuitCounterTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciicircuitcounterentry is not None:
                for child_ref in self.ciicircuitcounterentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiCircuitCounterTable']['meta_info']


    class CiiIPRATable(object):
        """
        The table of IP Reachable Addresses to networks,
        subnetworks or hosts either manually configured or
        learned from another protocol.
        
        .. attribute:: ciiipraentry
        
        	Each entry defines an IP Reachable Address to a network, subnetwork or host.  Each IP Reachable Address may have multiple entries in the table, one for each equal cost path to the reachable address
        	**type**\: list of :py:class:`CiiIPRAEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiIPRATable.CiiIPRAEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciiipraentry = YList()
            self.ciiipraentry.parent = self
            self.ciiipraentry.name = 'ciiipraentry'


        class CiiIPRAEntry(object):
            """
            Each entry defines an IP Reachable Address to a network,
            subnetwork or host.
            
            Each IP Reachable Address may have multiple entries in the
            table, one for each equal cost path to the reachable address.
            
            .. attribute:: ciiipradest
            
            	The destination of this IP Reachable Address. This is either a network address, subnetwork address or host address. This object follows the ManualOrAutomatic behavior
            	**type**\: str
            
            	**range:** 4 \| 16
            
            .. attribute:: ciiipradestprefixlen
            
            	The length of the IP Netmask for Reachability Address. This object follows the ManualOrAutomatic behavior
            	**type**\: int
            
            	**range:** 0..128
            
            .. attribute:: ciiipradesttype
            
            	The type of this IP Reachable Address.  This object follows the ManualOrAutomatic behavior
            	**type**\: :py:class:`InetAddressType_Enum <ydk.models.inet.INET_ADDRESS_MIB.InetAddressType_Enum>`
            
            .. attribute:: ciiipranexthopindex
            
            	Index of next hop.  Used when there are multiple Equal Cost Multipath alternatives for the same destination
            	**type**\: int
            
            	**range:** 1..65535
            
            .. attribute:: ciiipraadminstate
            
            	The administrative state of the IP Reachable Address. This object follows the CiiAdminState and ManualOrAutomatic behaviors
            	**type**\: :py:class:`CiiAdminState_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiAdminState_Enum>`
            
            .. attribute:: ciiipraexiststate
            
            	The state of this IP Reachable Address. This object follows the ExistenceState and ManualOrAutomatic behaviors
            	**type**\: :py:class:`RowStatus_Enum <ydk.models.snmpv2.SNMPv2_TC.RowStatus_Enum>`
            
            .. attribute:: ciiiprafullmetric
            
            	The wide metric value for reaching the specified destination over this circuit. This object follows the ManualOrAutomatic behavior
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciiiprametric
            
            	The metric value for reaching the specified destination over this circuit. This object follows the ManualOrAutomatic behavior
            	**type**\: int
            
            	**range:** 0..63
            
            .. attribute:: ciiiprametrictype
            
            	Indicates whether the metric is internal or external. This object follows the ManualOrAutomatic behavior
            	**type**\: :py:class:`CiiMetricType_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiMetricType_Enum>`
            
            .. attribute:: ciiipranexthop
            
            	The IP next hop to this destination
            	**type**\: str
            
            	**range:** 4 \| 16
            
            .. attribute:: ciiipranexthoptype
            
            	The type of the IP next hop address
            	**type**\: :py:class:`InetAddressType_Enum <ydk.models.inet.INET_ADDRESS_MIB.InetAddressType_Enum>`
            
            .. attribute:: ciiiprasnpaaddress
            
            	The SNPA Address to which a PDU may be forwarded in order to reach a destination which matches this IP Reachable Address. This object follows the ManualOrAutomatic behavior
            	**type**\: str
            
            	**range:** 0..20
            
            .. attribute:: ciiiprasourcetype
            
            	The origin of this route
            	**type**\: :py:class:`CiiIPRASourceType_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiIPRATable.CiiIPRAEntry.CiiIPRASourceType_Enum>`
            
            .. attribute:: ciiipratype
            
            	The type of this IP Reachable Address. Those of type manual are created by the network manager. Those of type automatic are created through propagation of routing information from another routing protocol.  This object follows the ManualOrAutomatic behavior
            	**type**\: :py:class:`CiiIPRAType_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiIPRATable.CiiIPRAEntry.CiiIPRAType_Enum>`
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciiipradest = None
                self.ciiipradestprefixlen = None
                self.ciiipradesttype = None
                self.ciiipranexthopindex = None
                self.ciiipraadminstate = None
                self.ciiipraexiststate = None
                self.ciiiprafullmetric = None
                self.ciiiprametric = None
                self.ciiiprametrictype = None
                self.ciiipranexthop = None
                self.ciiipranexthoptype = None
                self.ciiiprasnpaaddress = None
                self.ciiiprasourcetype = None
                self.ciiipratype = None

            class CiiIPRASourceType_Enum(Enum):
                """
                CiiIPRASourceType_Enum

                The origin of this route.

                """

                STATIC = 1

                DIRECT = 2

                OSPFV2 = 3

                OSPFV3 = 4

                ISIS = 5

                RIP = 6

                IGRP = 7

                EIGRP = 8

                BGP = 9

                OTHER = 10


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiIPRATable.CiiIPRAEntry.CiiIPRASourceType_Enum']


            class CiiIPRAType_Enum(Enum):
                """
                CiiIPRAType_Enum

                The type of this IP Reachable Address. Those of type
                manual are created by the network manager. Those of type
                automatic are created through propagation of routing
                information from another routing protocol.  This object
                follows the ManualOrAutomatic behavior.

                """

                MANUAL = 1

                AUTOMATIC = 2


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiIPRATable.CiiIPRAEntry.CiiIPRAType_Enum']


            @property
            def _common_path(self):
                if self.ciiipradest is None:
                    raise YPYDataValidationError('Key property ciiipradest is None')
                if self.ciiipradestprefixlen is None:
                    raise YPYDataValidationError('Key property ciiipradestprefixlen is None')
                if self.ciiipradesttype is None:
                    raise YPYDataValidationError('Key property ciiipradesttype is None')
                if self.ciiipranexthopindex is None:
                    raise YPYDataValidationError('Key property ciiipranexthopindex is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiIPRATable/CISCO-IETF-ISIS-MIB:ciiIPRAEntry[CISCO-IETF-ISIS-MIB:ciiIPRADest = ' + str(self.ciiipradest) + '][CISCO-IETF-ISIS-MIB:ciiIPRADestPrefixLen = ' + str(self.ciiipradestprefixlen) + '][CISCO-IETF-ISIS-MIB:ciiIPRADestType = ' + str(self.ciiipradesttype) + '][CISCO-IETF-ISIS-MIB:ciiIPRANextHopIndex = ' + str(self.ciiipranexthopindex) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciiipradest is not None:
                    return True

                if self.ciiipradestprefixlen is not None:
                    return True

                if self.ciiipradesttype is not None:
                    return True

                if self.ciiipranexthopindex is not None:
                    return True

                if self.ciiipraadminstate is not None:
                    return True

                if self.ciiipraexiststate is not None:
                    return True

                if self.ciiiprafullmetric is not None:
                    return True

                if self.ciiiprametric is not None:
                    return True

                if self.ciiiprametrictype is not None:
                    return True

                if self.ciiipranexthop is not None:
                    return True

                if self.ciiipranexthoptype is not None:
                    return True

                if self.ciiiprasnpaaddress is not None:
                    return True

                if self.ciiiprasourcetype is not None:
                    return True

                if self.ciiipratype is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiIPRATable.CiiIPRAEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiIPRATable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciiipraentry is not None:
                for child_ref in self.ciiipraentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiIPRATable']['meta_info']


    class CiiISAdjAreaAddrTable(object):
        """
        This table contains the set of Area Addresses of
        neighboring Intermediate Systems as reported in received
        IIH PDUs.
        
        .. attribute:: ciiisadjareaaddrentry
        
        	Each entry contains one Area Address reported by a neighboring Intermediate System in its IIH PDUs
        	**type**\: list of :py:class:`CiiISAdjAreaAddrEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjAreaAddrTable.CiiISAdjAreaAddrEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciiisadjareaaddrentry = YList()
            self.ciiisadjareaaddrentry.parent = self
            self.ciiisadjareaaddrentry.name = 'ciiisadjareaaddrentry'


        class CiiISAdjAreaAddrEntry(object):
            """
            Each entry contains one Area Address reported by a
            neighboring Intermediate System in its IIH PDUs.
            
            .. attribute:: ciicircindex
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            .. attribute:: ciiisadjareaaddrindex
            
            	An index for the areas associated with one neighbor. This provides a simple way to walk the table
            	**type**\: int
            
            	**range:** 1..2000000000
            
            .. attribute:: ciiisadjindex
            
            	
            	**type**\: int
            
            	**range:** 1..2000000000
            
            .. attribute:: ciiisadjareaaddress
            
            	One Area Address as reported in IIH PDUs received from the neighbor
            	**type**\: str
            
            	**range:** 0..20
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciicircindex = None
                self.ciiisadjareaaddrindex = None
                self.ciiisadjindex = None
                self.ciiisadjareaaddress = None

            @property
            def _common_path(self):
                if self.ciicircindex is None:
                    raise YPYDataValidationError('Key property ciicircindex is None')
                if self.ciiisadjareaaddrindex is None:
                    raise YPYDataValidationError('Key property ciiisadjareaaddrindex is None')
                if self.ciiisadjindex is None:
                    raise YPYDataValidationError('Key property ciiisadjindex is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiISAdjAreaAddrTable/CISCO-IETF-ISIS-MIB:ciiISAdjAreaAddrEntry[CISCO-IETF-ISIS-MIB:ciiCircIndex = ' + str(self.ciicircindex) + '][CISCO-IETF-ISIS-MIB:ciiISAdjAreaAddrIndex = ' + str(self.ciiisadjareaaddrindex) + '][CISCO-IETF-ISIS-MIB:ciiISAdjIndex = ' + str(self.ciiisadjindex) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciicircindex is not None:
                    return True

                if self.ciiisadjareaaddrindex is not None:
                    return True

                if self.ciiisadjindex is not None:
                    return True

                if self.ciiisadjareaaddress is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiISAdjAreaAddrTable.CiiISAdjAreaAddrEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiISAdjAreaAddrTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciiisadjareaaddrentry is not None:
                for child_ref in self.ciiisadjareaaddrentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiISAdjAreaAddrTable']['meta_info']


    class CiiISAdjIPAddrTable(object):
        """
        This table contains the set of IP Addresses of
        neighboring Intermediate Systems as reported in received
        IIH PDUs.
        
        .. attribute:: ciiisadjipaddrentry
        
        	Each entry contains one IP Address reported by a neighboring Intermediate System in its IIH PDUs
        	**type**\: list of :py:class:`CiiISAdjIPAddrEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjIPAddrTable.CiiISAdjIPAddrEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciiisadjipaddrentry = YList()
            self.ciiisadjipaddrentry.parent = self
            self.ciiisadjipaddrentry.name = 'ciiisadjipaddrentry'


        class CiiISAdjIPAddrEntry(object):
            """
            Each entry contains one IP Address reported by a
            neighboring Intermediate System in its IIH PDUs.
            
            .. attribute:: ciicircindex
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            .. attribute:: ciiisadjindex
            
            	
            	**type**\: int
            
            	**range:** 1..2000000000
            
            .. attribute:: ciiisadjipaddrindex
            
            	An index to this table which identifies the IP addresses to which this entry belongs
            	**type**\: int
            
            	**range:** 1..2000000000
            
            .. attribute:: ciiisadjipaddraddress
            
            	One IP Address as reported in IIH PDUs received from the neighbor
            	**type**\: str
            
            	**range:** 4 \| 16
            
            .. attribute:: ciiisadjipaddrtype
            
            	The type of one IP Address as reported in IIH PDUs received from the neighbor
            	**type**\: :py:class:`InetAddressType_Enum <ydk.models.inet.INET_ADDRESS_MIB.InetAddressType_Enum>`
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciicircindex = None
                self.ciiisadjindex = None
                self.ciiisadjipaddrindex = None
                self.ciiisadjipaddraddress = None
                self.ciiisadjipaddrtype = None

            @property
            def _common_path(self):
                if self.ciicircindex is None:
                    raise YPYDataValidationError('Key property ciicircindex is None')
                if self.ciiisadjindex is None:
                    raise YPYDataValidationError('Key property ciiisadjindex is None')
                if self.ciiisadjipaddrindex is None:
                    raise YPYDataValidationError('Key property ciiisadjipaddrindex is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiISAdjIPAddrTable/CISCO-IETF-ISIS-MIB:ciiISAdjIPAddrEntry[CISCO-IETF-ISIS-MIB:ciiCircIndex = ' + str(self.ciicircindex) + '][CISCO-IETF-ISIS-MIB:ciiISAdjIndex = ' + str(self.ciiisadjindex) + '][CISCO-IETF-ISIS-MIB:ciiISAdjIPAddrIndex = ' + str(self.ciiisadjipaddrindex) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciicircindex is not None:
                    return True

                if self.ciiisadjindex is not None:
                    return True

                if self.ciiisadjipaddrindex is not None:
                    return True

                if self.ciiisadjipaddraddress is not None:
                    return True

                if self.ciiisadjipaddrtype is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiISAdjIPAddrTable.CiiISAdjIPAddrEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiISAdjIPAddrTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciiisadjipaddrentry is not None:
                for child_ref in self.ciiisadjipaddrentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiISAdjIPAddrTable']['meta_info']


    class CiiISAdjProtSuppTable(object):
        """
        This table contains the set of protocols supported by
        neighboring Intermediate Systems as reported in received
        IIH PDUs.
        
        .. attribute:: ciiisadjprotsuppentry
        
        	Each entry contains one protocol supported by a neighboring Intermediate System as reported in its IIH PDUs
        	**type**\: list of :py:class:`CiiISAdjProtSuppEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjProtSuppTable.CiiISAdjProtSuppEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciiisadjprotsuppentry = YList()
            self.ciiisadjprotsuppentry.parent = self
            self.ciiisadjprotsuppentry.name = 'ciiisadjprotsuppentry'


        class CiiISAdjProtSuppEntry(object):
            """
            Each entry contains one protocol supported by a
            neighboring Intermediate System as reported in its IIH
            PDUs.
            
            .. attribute:: ciicircindex
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            .. attribute:: ciiisadjindex
            
            	
            	**type**\: int
            
            	**range:** 1..2000000000
            
            .. attribute:: ciiisadjprotsuppprotocol
            
            	One supported protocol as reported in IIH PDUs received from the neighbor
            	**type**\: :py:class:`CiiSupportedProtocol_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiSupportedProtocol_Enum>`
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciicircindex = None
                self.ciiisadjindex = None
                self.ciiisadjprotsuppprotocol = None

            @property
            def _common_path(self):
                if self.ciicircindex is None:
                    raise YPYDataValidationError('Key property ciicircindex is None')
                if self.ciiisadjindex is None:
                    raise YPYDataValidationError('Key property ciiisadjindex is None')
                if self.ciiisadjprotsuppprotocol is None:
                    raise YPYDataValidationError('Key property ciiisadjprotsuppprotocol is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiISAdjProtSuppTable/CISCO-IETF-ISIS-MIB:ciiISAdjProtSuppEntry[CISCO-IETF-ISIS-MIB:ciiCircIndex = ' + str(self.ciicircindex) + '][CISCO-IETF-ISIS-MIB:ciiISAdjIndex = ' + str(self.ciiisadjindex) + '][CISCO-IETF-ISIS-MIB:ciiISAdjProtSuppProtocol = ' + str(self.ciiisadjprotsuppprotocol) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciicircindex is not None:
                    return True

                if self.ciiisadjindex is not None:
                    return True

                if self.ciiisadjprotsuppprotocol is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiISAdjProtSuppTable.CiiISAdjProtSuppEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiISAdjProtSuppTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciiisadjprotsuppentry is not None:
                for child_ref in self.ciiisadjprotsuppentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiISAdjProtSuppTable']['meta_info']


    class CiiISAdjTable(object):
        """
        The table of adjacencies to Intermediate Systems.
        
        .. attribute:: ciiisadjentry
        
        	Each entry corresponds to one adjacency to an Intermediate System on this system
        	**type**\: list of :py:class:`CiiISAdjEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciiisadjentry = YList()
            self.ciiisadjentry.parent = self
            self.ciiisadjentry.name = 'ciiisadjentry'


        class CiiISAdjEntry(object):
            """
            Each entry corresponds to one adjacency to an
            Intermediate System on this system.
            
            .. attribute:: ciicircindex
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            .. attribute:: ciiisadjindex
            
            	A unique value identifying the IS adjacency from all other such adjacencies on this circuit. This value is automatically assigned by the system when the adjacency is created
            	**type**\: int
            
            	**range:** 1..2000000000
            
            .. attribute:: ciiisadj3waystate
            
            	The 3Way state of the adjacency.  These are picked to match the historical on\-the\-wire representation of the 3Way state, and are not intended to match ciiISAdjState
            	**type**\: :py:class:`CiiISAdj3WayState_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry.CiiISAdj3WayState_Enum>`
            
            .. attribute:: ciiisadjholdtimer
            
            	The holding time in seconds for this adjacency. This value is based on received IIH PDUs and the elapsed time since receipt
            	**type**\: int
            
            	**range:** 1..65535
            
            .. attribute:: ciiisadjlastuptime
            
            	If the ciiISAdjState is in state 'up', the value of sysUpTime when the adjacency most recently entered the state 'up',  or 0 if it has never been in state 'up'
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciiisadjnbrextendedcircid
            
            	The 4 byte Extended Circuit ID learned from the Neighbor during 3\-way handshake, or 0
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciiisadjneighpriority
            
            	Priority of the neighboring Intermediate System for becoming the Designated Intermediate System
            	**type**\: int
            
            	**range:** 0..127
            
            .. attribute:: ciiisadjneighsnpaaddress
            
            	The SNPA address of the neighboring system
            	**type**\: str
            
            	**range:** 0..20
            
            .. attribute:: ciiisadjneighsysid
            
            	The system ID of the neighboring Intermediate System
            	**type**\: str
            
            	**range:** 6
            
            .. attribute:: ciiisadjneighsystype
            
            	The type of the neighboring system
            	**type**\: :py:class:`CiiISAdjNeighSysType_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry.CiiISAdjNeighSysType_Enum>`
            
            .. attribute:: ciiisadjstate
            
            	The state of the adjacency
            	**type**\: :py:class:`CiiISAdjState_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry.CiiISAdjState_Enum>`
            
            .. attribute:: ciiisadjusage
            
            	How is the adjacency used?  On a point\-to\-point link, this might be level1and2, but on a LAN, the usage will be level1 on the adjacency between peers at L1, and level2 for the adjacency between peers at L2
            	**type**\: :py:class:`CiiISAdjUsage_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry.CiiISAdjUsage_Enum>`
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciicircindex = None
                self.ciiisadjindex = None
                self.ciiisadj3waystate = None
                self.ciiisadjholdtimer = None
                self.ciiisadjlastuptime = None
                self.ciiisadjnbrextendedcircid = None
                self.ciiisadjneighpriority = None
                self.ciiisadjneighsnpaaddress = None
                self.ciiisadjneighsysid = None
                self.ciiisadjneighsystype = None
                self.ciiisadjstate = None
                self.ciiisadjusage = None

            class CiiISAdj3WayState_Enum(Enum):
                """
                CiiISAdj3WayState_Enum

                The 3Way state of the adjacency.  These are picked
                to match the historical on\-the\-wire representation
                of the 3Way state, and are not intended to match
                ciiISAdjState.

                """

                UP = 0

                INITIALIZING = 1

                DOWN = 2

                FAILED = 3


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry.CiiISAdj3WayState_Enum']


            class CiiISAdjNeighSysType_Enum(Enum):
                """
                CiiISAdjNeighSysType_Enum

                The type of the neighboring system.

                """

                L1INTERMEDIATESYSTEM = 1

                L2INTERMEDIATESYSTEM = 2

                L1L2INTERMEDIATESYSTEM = 3

                UNKNOWN = 4


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry.CiiISAdjNeighSysType_Enum']


            class CiiISAdjState_Enum(Enum):
                """
                CiiISAdjState_Enum

                The state of the adjacency

                """

                DOWN = 1

                INITIALIZING = 2

                UP = 3

                FAILED = 4


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry.CiiISAdjState_Enum']


            class CiiISAdjUsage_Enum(Enum):
                """
                CiiISAdjUsage_Enum

                How is the adjacency used?  On a point\-to\-point link,
                this might be level1and2, but on a LAN, the usage will
                be level1 on the adjacency between peers at L1,
                and level2 for the adjacency between peers at L2.

                """

                LEVEL1 = 1

                LEVEL2 = 2

                LEVEL1AND2 = 3


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry.CiiISAdjUsage_Enum']


            @property
            def _common_path(self):
                if self.ciicircindex is None:
                    raise YPYDataValidationError('Key property ciicircindex is None')
                if self.ciiisadjindex is None:
                    raise YPYDataValidationError('Key property ciiisadjindex is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiISAdjTable/CISCO-IETF-ISIS-MIB:ciiISAdjEntry[CISCO-IETF-ISIS-MIB:ciiCircIndex = ' + str(self.ciicircindex) + '][CISCO-IETF-ISIS-MIB:ciiISAdjIndex = ' + str(self.ciiisadjindex) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciicircindex is not None:
                    return True

                if self.ciiisadjindex is not None:
                    return True

                if self.ciiisadj3waystate is not None:
                    return True

                if self.ciiisadjholdtimer is not None:
                    return True

                if self.ciiisadjlastuptime is not None:
                    return True

                if self.ciiisadjnbrextendedcircid is not None:
                    return True

                if self.ciiisadjneighpriority is not None:
                    return True

                if self.ciiisadjneighsnpaaddress is not None:
                    return True

                if self.ciiisadjneighsysid is not None:
                    return True

                if self.ciiisadjneighsystype is not None:
                    return True

                if self.ciiisadjstate is not None:
                    return True

                if self.ciiisadjusage is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiISAdjTable.CiiISAdjEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiISAdjTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciiisadjentry is not None:
                for child_ref in self.ciiisadjentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiISAdjTable']['meta_info']


    class CiiLSPSummaryTable(object):
        """
        The table of LSP Headers.
        
        .. attribute:: ciilspsummaryentry
        
        	Each entry provides a summary describing an LSP currently stored in the system
        	**type**\: list of :py:class:`CiiLSPSummaryEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiLSPSummaryTable.CiiLSPSummaryEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciilspsummaryentry = YList()
            self.ciilspsummaryentry.parent = self
            self.ciilspsummaryentry.name = 'ciilspsummaryentry'


        class CiiLSPSummaryEntry(object):
            """
            Each entry provides a summary describing an
            LSP currently stored in the system.
            
            .. attribute:: ciilspid
            
            	The 8 byte LSP ID, consisting of the SystemID, Circuit ID, and Fragment Number
            	**type**\: str
            
            	**range:** 0 \| 8
            
            .. attribute:: ciilsplevel
            
            	At which level does this LSP appear?
            	**type**\: :py:class:`CiiISLevel_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiISLevel_Enum>`
            
            .. attribute:: ciilspattributes
            
            	Flags carried by the LSP
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: ciilspchecksum
            
            	The 16 bit Fletcher Checksum
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: ciilsplifetimeremain
            
            	The remaining lifetime in seconds for this LSP
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: ciilsppdulength
            
            	The length of this LSP
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: ciilspseq
            
            	The sequence number for this LSP
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciilspzerolife
            
            	Is this LSP being purged by this System?
            	**type**\: bool
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciilspid = None
                self.ciilsplevel = None
                self.ciilspattributes = None
                self.ciilspchecksum = None
                self.ciilsplifetimeremain = None
                self.ciilsppdulength = None
                self.ciilspseq = None
                self.ciilspzerolife = None

            @property
            def _common_path(self):
                if self.ciilspid is None:
                    raise YPYDataValidationError('Key property ciilspid is None')
                if self.ciilsplevel is None:
                    raise YPYDataValidationError('Key property ciilsplevel is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiLSPSummaryTable/CISCO-IETF-ISIS-MIB:ciiLSPSummaryEntry[CISCO-IETF-ISIS-MIB:ciiLSPID = ' + str(self.ciilspid) + '][CISCO-IETF-ISIS-MIB:ciiLSPLevel = ' + str(self.ciilsplevel) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciilspid is not None:
                    return True

                if self.ciilsplevel is not None:
                    return True

                if self.ciilspattributes is not None:
                    return True

                if self.ciilspchecksum is not None:
                    return True

                if self.ciilsplifetimeremain is not None:
                    return True

                if self.ciilsppdulength is not None:
                    return True

                if self.ciilspseq is not None:
                    return True

                if self.ciilspzerolife is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiLSPSummaryTable.CiiLSPSummaryEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiLSPSummaryTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciilspsummaryentry is not None:
                for child_ref in self.ciilspsummaryentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiLSPSummaryTable']['meta_info']


    class CiiLSPTLVTable(object):
        """
        The contents of each LSP.
        
        .. attribute:: ciilsptlventry
        
        	Each entry describes an LSP current stored in the system
        	**type**\: list of :py:class:`CiiLSPTLVEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiLSPTLVTable.CiiLSPTLVEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciilsptlventry = YList()
            self.ciilsptlventry.parent = self
            self.ciilsptlventry.name = 'ciilsptlventry'


        class CiiLSPTLVEntry(object):
            """
            Each entry describes an LSP current stored in the
            system.
            
            .. attribute:: ciilspid
            
            	
            	**type**\: str
            
            	**range:** 0 \| 8
            
            .. attribute:: ciilsplevel
            
            	
            	**type**\: :py:class:`CiiISLevel_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiISLevel_Enum>`
            
            .. attribute:: ciilsptlvindex
            
            	The index of this TLV in the LSP.  The first TLV has index 1 and the Nth TLV has an index of N
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciilsptlvchecksum
            
            	The 16 bit Fletcher Checksum
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: ciilsptlvlen
            
            	The length of this TLV
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: ciilsptlvseq
            
            	The sequence number for this LSP
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciilsptlvtype
            
            	The type of this TLV
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: ciilsptlvvalue
            
            	The value of this TLV
            	**type**\: str
            
            	**range:** 0..255
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciilspid = None
                self.ciilsplevel = None
                self.ciilsptlvindex = None
                self.ciilsptlvchecksum = None
                self.ciilsptlvlen = None
                self.ciilsptlvseq = None
                self.ciilsptlvtype = None
                self.ciilsptlvvalue = None

            @property
            def _common_path(self):
                if self.ciilspid is None:
                    raise YPYDataValidationError('Key property ciilspid is None')
                if self.ciilsplevel is None:
                    raise YPYDataValidationError('Key property ciilsplevel is None')
                if self.ciilsptlvindex is None:
                    raise YPYDataValidationError('Key property ciilsptlvindex is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiLSPTLVTable/CISCO-IETF-ISIS-MIB:ciiLSPTLVEntry[CISCO-IETF-ISIS-MIB:ciiLSPID = ' + str(self.ciilspid) + '][CISCO-IETF-ISIS-MIB:ciiLSPLevel = ' + str(self.ciilsplevel) + '][CISCO-IETF-ISIS-MIB:ciiLSPTLVIndex = ' + str(self.ciilsptlvindex) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciilspid is not None:
                    return True

                if self.ciilsplevel is not None:
                    return True

                if self.ciilsptlvindex is not None:
                    return True

                if self.ciilsptlvchecksum is not None:
                    return True

                if self.ciilsptlvlen is not None:
                    return True

                if self.ciilsptlvseq is not None:
                    return True

                if self.ciilsptlvtype is not None:
                    return True

                if self.ciilsptlvvalue is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiLSPTLVTable.CiiLSPTLVEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiLSPTLVTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciilsptlventry is not None:
                for child_ref in self.ciilsptlventry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiLSPTLVTable']['meta_info']


    class CiiManAreaAddrTable(object):
        """
        The set of manual area addresses configured on this
        Intermediate System.
        
        .. attribute:: ciimanareaaddrentry
        
        	Each entry contains one area address manually configured on this system
        	**type**\: list of :py:class:`CiiManAreaAddrEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiManAreaAddrTable.CiiManAreaAddrEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciimanareaaddrentry = YList()
            self.ciimanareaaddrentry.parent = self
            self.ciimanareaaddrentry.name = 'ciimanareaaddrentry'


        class CiiManAreaAddrEntry(object):
            """
            Each entry contains one area address manually configured
            on this system
            
            .. attribute:: ciimanareaaddr
            
            	A manually configured area address for this system. This object follows the index behavior.  Note\: an index for the entry {1, {49.0001} active} in this table would be the ordered pair (1, (0x03 0x49 0x00 0x01)), as the length of an Octet string is part of the OID
            	**type**\: str
            
            	**range:** 0..20
            
            .. attribute:: ciimanareaaddrexiststate
            
            	The state of the ciiManAreaAddrEntry. This object follows the Row Status behavior. If the ciiSysAdminState for this Intermediate System is 'on', and an attempt is made to set this object to the value 'destroy' or 'notInService' when this is the only ciiManAreaAddrEntry in state 'active' for this Intermediate System should return inconsistentValue
            	**type**\: :py:class:`RowStatus_Enum <ydk.models.snmpv2.SNMPv2_TC.RowStatus_Enum>`
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciimanareaaddr = None
                self.ciimanareaaddrexiststate = None

            @property
            def _common_path(self):
                if self.ciimanareaaddr is None:
                    raise YPYDataValidationError('Key property ciimanareaaddr is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiManAreaAddrTable/CISCO-IETF-ISIS-MIB:ciiManAreaAddrEntry[CISCO-IETF-ISIS-MIB:ciiManAreaAddr = ' + str(self.ciimanareaaddr) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciimanareaaddr is not None:
                    return True

                if self.ciimanareaaddrexiststate is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiManAreaAddrTable.CiiManAreaAddrEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiManAreaAddrTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciimanareaaddrentry is not None:
                for child_ref in self.ciimanareaaddrentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiManAreaAddrTable']['meta_info']


    class CiiPacketCounterTable(object):
        """
        Information about IS\-IS protocol traffic at one level
        on one circuit in one direction
        
        .. attribute:: ciipacketcounterentry
        
        	Information about IS\-IS protocol traffic at one level on one circuit in one direction
        	**type**\: list of :py:class:`CiiPacketCounterEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiPacketCounterTable.CiiPacketCounterEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciipacketcounterentry = YList()
            self.ciipacketcounterentry.parent = self
            self.ciipacketcounterentry.name = 'ciipacketcounterentry'


        class CiiPacketCounterEntry(object):
            """
            Information about IS\-IS protocol traffic at one level
            on one circuit in one direction
            
            .. attribute:: ciicircindex
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            .. attribute:: ciipacketcountdirection
            
            	Were we sending or receiving these PDUs?
            	**type**\: :py:class:`CiiPacketCountDirection_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiPacketCounterTable.CiiPacketCounterEntry.CiiPacketCountDirection_Enum>`
            
            .. attribute:: ciipacketcountlevel
            
            	The level at which these PDU counts have been collected
            	**type**\: :py:class:`CiiPacketCountLevel_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiPacketCounterTable.CiiPacketCounterEntry.CiiPacketCountLevel_Enum>`
            
            .. attribute:: ciipacketcountcsnps
            
            	The number of IS\-IS CSNP frames seen in this direction at this level
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciipacketcounteshellos
            
            	The number of ES Hello PDU frames seen in this direction.  ESH PDUs are counted at the lowest enabled level\: at L1 on L1 or L1L2 circuits, and at L2 otherwise
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciipacketcountiihellos
            
            	The number of IS\-IS Hello PDU frames seen in this direction at this level.  Point\-to\-Point IIH PDUs are counted at the lowest enabled level\: at L1 on L1 or L1L2 circuits, and at L2 otherwise
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciipacketcountishellos
            
            	The number of ES\-IS Hello PDU frames seen in this direction.  ISH PDUs are counted at the lowest enabled level\: at L1 on L1 or L1L2 circuits, and at L2 otherwise
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciipacketcountlsps
            
            	The number of IS\-IS LSP frames seen in this direction at this level
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciipacketcountpsnps
            
            	The number of IS\-IS PSNP frames seen in this direction at this level
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciipacketcountunknowns
            
            	The number of unknown IS\-IS PDU frames seen at this level
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciicircindex = None
                self.ciipacketcountdirection = None
                self.ciipacketcountlevel = None
                self.ciipacketcountcsnps = None
                self.ciipacketcounteshellos = None
                self.ciipacketcountiihellos = None
                self.ciipacketcountishellos = None
                self.ciipacketcountlsps = None
                self.ciipacketcountpsnps = None
                self.ciipacketcountunknowns = None

            class CiiPacketCountDirection_Enum(Enum):
                """
                CiiPacketCountDirection_Enum

                Were we sending or receiving these PDUs?

                """

                SENDING = 1

                RECEIVING = 2


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiPacketCounterTable.CiiPacketCounterEntry.CiiPacketCountDirection_Enum']


            class CiiPacketCountLevel_Enum(Enum):
                """
                CiiPacketCountLevel_Enum

                The level at which these PDU counts have been collected.

                """

                LEVEL1 = 1

                LEVEL2 = 2


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiPacketCounterTable.CiiPacketCounterEntry.CiiPacketCountLevel_Enum']


            @property
            def _common_path(self):
                if self.ciicircindex is None:
                    raise YPYDataValidationError('Key property ciicircindex is None')
                if self.ciipacketcountdirection is None:
                    raise YPYDataValidationError('Key property ciipacketcountdirection is None')
                if self.ciipacketcountlevel is None:
                    raise YPYDataValidationError('Key property ciipacketcountlevel is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiPacketCounterTable/CISCO-IETF-ISIS-MIB:ciiPacketCounterEntry[CISCO-IETF-ISIS-MIB:ciiCircIndex = ' + str(self.ciicircindex) + '][CISCO-IETF-ISIS-MIB:ciiPacketCountDirection = ' + str(self.ciipacketcountdirection) + '][CISCO-IETF-ISIS-MIB:ciiPacketCountLevel = ' + str(self.ciipacketcountlevel) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciicircindex is not None:
                    return True

                if self.ciipacketcountdirection is not None:
                    return True

                if self.ciipacketcountlevel is not None:
                    return True

                if self.ciipacketcountcsnps is not None:
                    return True

                if self.ciipacketcounteshellos is not None:
                    return True

                if self.ciipacketcountiihellos is not None:
                    return True

                if self.ciipacketcountishellos is not None:
                    return True

                if self.ciipacketcountlsps is not None:
                    return True

                if self.ciipacketcountpsnps is not None:
                    return True

                if self.ciipacketcountunknowns is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiPacketCounterTable.CiiPacketCounterEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiPacketCounterTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciipacketcounterentry is not None:
                for child_ref in self.ciipacketcounterentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiPacketCounterTable']['meta_info']


    class CiiRATable(object):
        """
        The table of Reachable Addresses to NSAPs or Address
        Prefixes.
        
        .. attribute:: ciiraentry
        
        	Each entry defines a Reachable Address to a NSAP or Address Prefix
        	**type**\: list of :py:class:`CiiRAEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRATable.CiiRAEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciiraentry = YList()
            self.ciiraentry.parent = self
            self.ciiraentry.name = 'ciiraentry'


        class CiiRAEntry(object):
            """
            Each entry defines a Reachable Address to a NSAP or
            Address Prefix.
            
            .. attribute:: ciicircindex
            
            	
            	**type**\: int
            
            	**range:** 1..2147483647
            
            .. attribute:: ciiraindex
            
            	The identifier for this ciiRAEntry. This value must be unique amongst all Reachable Addresses on the same parent Circuit. This object follows the index and ManualOrAutomatic behaviors
            	**type**\: int
            
            	**range:** 1..2000000000
            
            .. attribute:: ciiraaddrprefix
            
            	The destination of this Reachable Address. This is an Address Prefix. This object follows the replaceOnlyWhileDisabled and ManualOrAutomatic behaviors
            	**type**\: str
            
            	**range:** 0..20
            
            .. attribute:: ciiraadminstate
            
            	The administrative state of the Reachable Address. This object follows the CiiAdminState and ManualOrAutomatic behaviors
            	**type**\: :py:class:`CiiAdminState_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiAdminState_Enum>`
            
            .. attribute:: ciiraexiststate
            
            	The existence state of this Reachable Address. This object follows the ManualOrAutomatic behaviors
            	**type**\: :py:class:`RowStatus_Enum <ydk.models.snmpv2.SNMPv2_TC.RowStatus_Enum>`
            
            .. attribute:: ciiramaptype
            
            	The type of mapping to be employed to ascertain the SNPA Address which should be used in forwarding PDUs for this Reachable Address prefix. This object follows the ManualOrAutomatic behavior. The following values of mapping type are defined\:      none\: The mapping is null because the neighbor SNPA is           implicit by nature of the subnetwork (e.g. a           point\-to\-point linkage).      explicit\: The subnetwork addresses in the object           ciiRASNPAAddress is to be used.      extractIDI\: The SNPA is embedded in the IDI of           the destination NSAP Address. The mapping           algorithm extracts the SNPA to be used           according to the format and encoding rules of           ISO8473/Add2. This SNPA extraction algorithm can           be used in conjunction with Reachable Address           prefixes from the X.121, F.69, E.163 and E.164           addressing subdomains.      extractDSP\: All, or a suffix, of the SNPA is embedded           in the DSP of the destination address. This SNPA           extraction algorithm extracts the embedded           subnetwork addressing information by performing a           logical AND of the ciiRASNPAMask object value           with the destination address. The part of the           SNPA extracted from the destination NSAP is           appended to the ciiRASNPAPrefix object value to           form the next hop subnetwork addressing           information
            	**type**\: :py:class:`CiiRAMapType_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRATable.CiiRAEntry.CiiRAMapType_Enum>`
            
            .. attribute:: ciirametric
            
            	The metric value for reaching the specified prefix over this circuit. This object follows the ManualOrAutomatic behavior
            	**type**\: int
            
            	**range:** 0..63
            
            .. attribute:: ciirametrictype
            
            	Indicates whether the metric is internal or external. This object follows the ManualOrAutomatic behavior
            	**type**\: :py:class:`CiiMetricType_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiMetricType_Enum>`
            
            .. attribute:: ciirasnpaaddress
            
            	The SNPA Address to which a PDU may be forwarded in order to reach a destination which matches the address prefix of the Reachable Address. This object follows the ManualOrAutomatic behavior
            	**type**\: str
            
            	**range:** 0..20
            
            .. attribute:: ciirasnpamask
            
            	A bit mask with 1 bits indicating the positions in the effective destination address from which embedded SNPA information is to be extracted. For the extraction the first octet of the ciiRASNPAMask object value is aligned with the first octet (AFI) of the NSAP Address. If the ciiRASNPAMask object value and NSAP Address are of different lengths, the shorter of the two is logically padded with zeros before performing the extraction. This object follows the ManualOrAutomatic behavior
            	**type**\: str
            
            	**range:** 0..20
            
            .. attribute:: ciirasnpaprefix
            
            	A fixed SNPA prefix for use when the ciiRAMapType is extractDSP. The SNPA Address to use is formed by concatenating the fixed SNPA prefix with a variable SNPA part that is extracted from the effective destination address. For Reachable Address prefixes in which the entire SNPA is embedded in the DSP the SNPA Prefix shall be null. This object follows the ManualOrAutomatic behavior
            	**type**\: str
            
            	**range:** 0..20
            
            .. attribute:: ciiratype
            
            	The type of Reachable address. Those of type manual are created by the network manager. Those of type automatic are created through propagation of routing information from another routing protocol (eg. IDRP). 
            	**type**\: :py:class:`CiiRAType_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRATable.CiiRAEntry.CiiRAType_Enum>`
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciicircindex = None
                self.ciiraindex = None
                self.ciiraaddrprefix = None
                self.ciiraadminstate = None
                self.ciiraexiststate = None
                self.ciiramaptype = None
                self.ciirametric = None
                self.ciirametrictype = None
                self.ciirasnpaaddress = None
                self.ciirasnpamask = None
                self.ciirasnpaprefix = None
                self.ciiratype = None

            class CiiRAMapType_Enum(Enum):
                """
                CiiRAMapType_Enum

                The type of mapping to be employed to ascertain the SNPA
                Address which should be used in forwarding PDUs for this
                Reachable Address prefix. This object follows the
                ManualOrAutomatic behavior. The following values of
                mapping type are defined\:
                
                    none\: The mapping is null because the neighbor SNPA is
                          implicit by nature of the subnetwork (e.g. a
                          point\-to\-point linkage).
                
                    explicit\: The subnetwork addresses in the object
                          ciiRASNPAAddress is to be used.
                
                    extractIDI\: The SNPA is embedded in the IDI of
                          the destination NSAP Address. The mapping
                          algorithm extracts the SNPA to be used
                          according to the format and encoding rules of
                          ISO8473/Add2. This SNPA extraction algorithm can
                          be used in conjunction with Reachable Address
                          prefixes from the X.121, F.69, E.163 and E.164
                          addressing subdomains.
                
                    extractDSP\: All, or a suffix, of the SNPA is embedded
                          in the DSP of the destination address. This SNPA
                          extraction algorithm extracts the embedded
                          subnetwork addressing information by performing a
                          logical AND of the ciiRASNPAMask object value
                          with the destination address. The part of the
                          SNPA extracted from the destination NSAP is
                          appended to the ciiRASNPAPrefix object value to
                          form the next hop subnetwork addressing
                          information.

                """

                NONE = 1

                EXPLICIT = 2

                EXTRACTIDI = 3

                EXTRACTDSP = 4


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiRATable.CiiRAEntry.CiiRAMapType_Enum']


            class CiiRAType_Enum(Enum):
                """
                CiiRAType_Enum

                The type of Reachable address. Those of type
                manual are created by the network manager. Those
                of type automatic are created through propagation
                of routing information from another routing
                protocol (eg. IDRP). 

                """

                MANUAL = 1

                AUTOMATIC = 2


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiRATable.CiiRAEntry.CiiRAType_Enum']


            @property
            def _common_path(self):
                if self.ciicircindex is None:
                    raise YPYDataValidationError('Key property ciicircindex is None')
                if self.ciiraindex is None:
                    raise YPYDataValidationError('Key property ciiraindex is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiRATable/CISCO-IETF-ISIS-MIB:ciiRAEntry[CISCO-IETF-ISIS-MIB:ciiCircIndex = ' + str(self.ciicircindex) + '][CISCO-IETF-ISIS-MIB:ciiRAIndex = ' + str(self.ciiraindex) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciicircindex is not None:
                    return True

                if self.ciiraindex is not None:
                    return True

                if self.ciiraaddrprefix is not None:
                    return True

                if self.ciiraadminstate is not None:
                    return True

                if self.ciiraexiststate is not None:
                    return True

                if self.ciiramaptype is not None:
                    return True

                if self.ciirametric is not None:
                    return True

                if self.ciirametrictype is not None:
                    return True

                if self.ciirasnpaaddress is not None:
                    return True

                if self.ciirasnpamask is not None:
                    return True

                if self.ciirasnpaprefix is not None:
                    return True

                if self.ciiratype is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiRATable.CiiRAEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiRATable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciiraentry is not None:
                for child_ref in self.ciiraentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiRATable']['meta_info']


    class CiiRedistributeAddrTable(object):
        """
        This table provides criteria to decide if a route should
        be leaked from L2 to L1 when Domain Wide Prefix leaking is
        enabled.
        
        Addresses that match the summary mask in the table will
        be announced at L1 by routers when ciiSysL2toL1Leaking
        is enabled.  Routes that fall into the ranges specified
        are announced as is, without being summarized.  Routes
        that do not match a summary mask are not announced.
        
        .. attribute:: ciiredistributeaddrentry
        
        	Each entry contains one IP summary address to manage leaking L2 addresses into L1
        	**type**\: list of :py:class:`CiiRedistributeAddrEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRedistributeAddrTable.CiiRedistributeAddrEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciiredistributeaddrentry = YList()
            self.ciiredistributeaddrentry.parent = self
            self.ciiredistributeaddrentry.name = 'ciiredistributeaddrentry'


        class CiiRedistributeAddrEntry(object):
            """
            Each entry contains one IP summary address to
            manage leaking L2 addresses into L1.
            
            .. attribute:: ciiredistributeaddraddress
            
            	The IP Address value for this summary address. This object follows the index behavior
            	**type**\: str
            
            	**range:** 4 \| 16
            
            .. attribute:: ciiredistributeaddrprefixlen
            
            	The Length of the IP NetMask for this summary address
            	**type**\: int
            
            	**range:** 0..128
            
            .. attribute:: ciiredistributeaddrtype
            
            	The Type of IP address for this summary address. This object follows the index behavior
            	**type**\: :py:class:`InetAddressType_Enum <ydk.models.inet.INET_ADDRESS_MIB.InetAddressType_Enum>`
            
            .. attribute:: ciiredistributeaddrexiststate
            
            	The existence state of this summary address. This object follows the row status behavior
            	**type**\: :py:class:`RowStatus_Enum <ydk.models.snmpv2.SNMPv2_TC.RowStatus_Enum>`
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciiredistributeaddraddress = None
                self.ciiredistributeaddrprefixlen = None
                self.ciiredistributeaddrtype = None
                self.ciiredistributeaddrexiststate = None

            @property
            def _common_path(self):
                if self.ciiredistributeaddraddress is None:
                    raise YPYDataValidationError('Key property ciiredistributeaddraddress is None')
                if self.ciiredistributeaddrprefixlen is None:
                    raise YPYDataValidationError('Key property ciiredistributeaddrprefixlen is None')
                if self.ciiredistributeaddrtype is None:
                    raise YPYDataValidationError('Key property ciiredistributeaddrtype is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiRedistributeAddrTable/CISCO-IETF-ISIS-MIB:ciiRedistributeAddrEntry[CISCO-IETF-ISIS-MIB:ciiRedistributeAddrAddress = ' + str(self.ciiredistributeaddraddress) + '][CISCO-IETF-ISIS-MIB:ciiRedistributeAddrPrefixLen = ' + str(self.ciiredistributeaddrprefixlen) + '][CISCO-IETF-ISIS-MIB:ciiRedistributeAddrType = ' + str(self.ciiredistributeaddrtype) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciiredistributeaddraddress is not None:
                    return True

                if self.ciiredistributeaddrprefixlen is not None:
                    return True

                if self.ciiredistributeaddrtype is not None:
                    return True

                if self.ciiredistributeaddrexiststate is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiRedistributeAddrTable.CiiRedistributeAddrEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiRedistributeAddrTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciiredistributeaddrentry is not None:
                for child_ref in self.ciiredistributeaddrentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiRedistributeAddrTable']['meta_info']


    class CiiRouterTable(object):
        """
        The set of hostnames and router ID.
        
        .. attribute:: ciirouterentry
        
        	Each entry tracks information about one peer at one level
        	**type**\: list of :py:class:`CiiRouterEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiRouterTable.CiiRouterEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciirouterentry = YList()
            self.ciirouterentry.parent = self
            self.ciirouterentry.name = 'ciirouterentry'


        class CiiRouterEntry(object):
            """
            Each entry tracks information about one peer at
            one level.
            
            .. attribute:: ciirouterlevel
            
            	The level of this Intermediate System
            	**type**\: :py:class:`CiiISLevel_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiISLevel_Enum>`
            
            .. attribute:: ciiroutersysid
            
            	The System ID of the Router Peer
            	**type**\: str
            
            	**range:** 6
            
            .. attribute:: ciirouterhostname
            
            	The hostname listed in LSP, or zero\-length string if none
            	**type**\: str
            
            	**range:** 0..255
            
            .. attribute:: ciirouterid
            
            	The Router ID of the Peer found in LSP, or zero if none
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciirouterlevel = None
                self.ciiroutersysid = None
                self.ciirouterhostname = None
                self.ciirouterid = None

            @property
            def _common_path(self):
                if self.ciirouterlevel is None:
                    raise YPYDataValidationError('Key property ciirouterlevel is None')
                if self.ciiroutersysid is None:
                    raise YPYDataValidationError('Key property ciiroutersysid is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiRouterTable/CISCO-IETF-ISIS-MIB:ciiRouterEntry[CISCO-IETF-ISIS-MIB:ciiRouterLevel = ' + str(self.ciirouterlevel) + '][CISCO-IETF-ISIS-MIB:ciiRouterSysID = ' + str(self.ciiroutersysid) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciirouterlevel is not None:
                    return True

                if self.ciiroutersysid is not None:
                    return True

                if self.ciirouterhostname is not None:
                    return True

                if self.ciirouterid is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiRouterTable.CiiRouterEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiRouterTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciirouterentry is not None:
                for child_ref in self.ciirouterentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiRouterTable']['meta_info']


    class CiiSummAddrTable(object):
        """
        The set of IP summary addresses to use in forming
        summary TLVs originated by this Intermediate System.
        
        An administrator may use a summary address to combine
        and modify IP Reachability announcements.  If the
        Intermediate system can reach any subset of the summary
        address, the summary address will be announced instead,
        at the configured metric.
        
        .. attribute:: ciisummaddrentry
        
        	Each entry contains one IP summary address
        	**type**\: list of :py:class:`CiiSummAddrEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSummAddrTable.CiiSummAddrEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciisummaddrentry = YList()
            self.ciisummaddrentry.parent = self
            self.ciisummaddrentry.name = 'ciisummaddrentry'


        class CiiSummAddrEntry(object):
            """
            Each entry contains one IP summary address.
            
            .. attribute:: ciisummaddress
            
            	The IP Address value for this summary address. This object follows the index behavior
            	**type**\: str
            
            	**range:** 4 \| 16
            
            .. attribute:: ciisummaddresstype
            
            	The Type of IP address for this summary address. This object follows the index behavior
            	**type**\: :py:class:`InetAddressType_Enum <ydk.models.inet.INET_ADDRESS_MIB.InetAddressType_Enum>`
            
            .. attribute:: ciisummaddrprefixlen
            
            	The Length of the IP NetMask for this summary address
            	**type**\: int
            
            	**range:** 0..128
            
            .. attribute:: ciisummaddrexiststate
            
            	The existence state of this summary address. This object follows the row status behavior
            	**type**\: :py:class:`RowStatus_Enum <ydk.models.snmpv2.SNMPv2_TC.RowStatus_Enum>`
            
            .. attribute:: ciisummaddrfullmetric
            
            	The wide metric value to announce this summary address with in LSPs generated by this system
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisummaddrmetric
            
            	The metric value to announce this summary address with in LSPs generated by this system
            	**type**\: int
            
            	**range:** 0..63
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciisummaddress = None
                self.ciisummaddresstype = None
                self.ciisummaddrprefixlen = None
                self.ciisummaddrexiststate = None
                self.ciisummaddrfullmetric = None
                self.ciisummaddrmetric = None

            @property
            def _common_path(self):
                if self.ciisummaddress is None:
                    raise YPYDataValidationError('Key property ciisummaddress is None')
                if self.ciisummaddresstype is None:
                    raise YPYDataValidationError('Key property ciisummaddresstype is None')
                if self.ciisummaddrprefixlen is None:
                    raise YPYDataValidationError('Key property ciisummaddrprefixlen is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiSummAddrTable/CISCO-IETF-ISIS-MIB:ciiSummAddrEntry[CISCO-IETF-ISIS-MIB:ciiSummAddress = ' + str(self.ciisummaddress) + '][CISCO-IETF-ISIS-MIB:ciiSummAddressType = ' + str(self.ciisummaddresstype) + '][CISCO-IETF-ISIS-MIB:ciiSummAddrPrefixLen = ' + str(self.ciisummaddrprefixlen) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciisummaddress is not None:
                    return True

                if self.ciisummaddresstype is not None:
                    return True

                if self.ciisummaddrprefixlen is not None:
                    return True

                if self.ciisummaddrexiststate is not None:
                    return True

                if self.ciisummaddrfullmetric is not None:
                    return True

                if self.ciisummaddrmetric is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiSummAddrTable.CiiSummAddrEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiSummAddrTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciisummaddrentry is not None:
                for child_ref in self.ciisummaddrentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiSummAddrTable']['meta_info']


    class CiiSysLevelTable(object):
        """
        Level specific information about the System.
        
        .. attribute:: ciisyslevelentry
        
        	Describe variables defined for Area or Domain
        	**type**\: list of :py:class:`CiiSysLevelEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysLevelTable.CiiSysLevelEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciisyslevelentry = YList()
            self.ciisyslevelentry.parent = self
            self.ciisyslevelentry.name = 'ciisyslevelentry'


        class CiiSysLevelEntry(object):
            """
            Describe variables defined for Area or Domain.
            
            .. attribute:: ciisyslevelindex
            
            	The level that this entry describes
            	**type**\: :py:class:`CiiSysLevelIndex_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysLevelTable.CiiSysLevelEntry.CiiSysLevelIndex_Enum>`
            
            .. attribute:: ciisyslevelmetricstyle
            
            	Which style of Metric do we generate in our LSPs at this level? This object follows the replaceOnlyWhileDisabled behavior
            	**type**\: :py:class:`CiiMetricStyle_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiMetricStyle_Enum>`
            
            .. attribute:: ciisyslevelminlspgenint
            
            	Minimum interval, in seconds, between successive generation of LSPs with the same LSPID at this level by this Intermediate System.  This object follows the resettingTimer behavior
            	**type**\: int
            
            	**range:** 1..65535
            
            .. attribute:: ciisysleveloriglspbuffsize
            
            	The maximum size of LSPs and SNPs originated by this Intermediate System at this level. This object follows the replaceOnlyWhileDisabled behavior
            	**type**\: int
            
            	**range:** 512..16000
            
            .. attribute:: ciisysleveloverloadstate
            
            	The state of the database at this level. The value 'off' indicates that IS\-IS is not active at this level. The value 'on' indicates that IS\-IS is active at this level, and not overloaded. The value 'waiting' indicates a database that is low on an essential resource, such as memory. The administrator may force the state to 'overloaded' by setting the object ciiSysLevelSetOverload. If the state is 'waiting' or 'overloaded', we originate LSPs with the Overload bit set
            	**type**\: :py:class:`CiiLevelState_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiLevelState_Enum>`
            
            .. attribute:: ciisyslevelsetoverload
            
            	Administratively set the overload bit for the level. The overload bit will continue to be set if the implementation runs out of memory, independent of this variable
            	**type**\: bool
            
            .. attribute:: ciisyslevelsetoverloaduntil
            
            	If set, the overload bit should be set, and cleared after sysUpTime exceeds this value
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisyslevelspfconsiders
            
            	Which style of Metric do we consider in our SPF computation at this level?
            	**type**\: :py:class:`CiiMetricStyle_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiMetricStyle_Enum>`
            
            .. attribute:: ciisyslevelteenabled
            
            	Do we do Traffic Engineering at this level?
            	**type**\: bool
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciisyslevelindex = None
                self.ciisyslevelmetricstyle = None
                self.ciisyslevelminlspgenint = None
                self.ciisysleveloriglspbuffsize = None
                self.ciisysleveloverloadstate = None
                self.ciisyslevelsetoverload = None
                self.ciisyslevelsetoverloaduntil = None
                self.ciisyslevelspfconsiders = None
                self.ciisyslevelteenabled = None

            class CiiSysLevelIndex_Enum(Enum):
                """
                CiiSysLevelIndex_Enum

                The level that this entry describes.

                """

                LEVEL1IS = 1

                LEVEL2IS = 2


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiSysLevelTable.CiiSysLevelEntry.CiiSysLevelIndex_Enum']


            @property
            def _common_path(self):
                if self.ciisyslevelindex is None:
                    raise YPYDataValidationError('Key property ciisyslevelindex is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiSysLevelTable/CISCO-IETF-ISIS-MIB:ciiSysLevelEntry[CISCO-IETF-ISIS-MIB:ciiSysLevelIndex = ' + str(self.ciisyslevelindex) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciisyslevelindex is not None:
                    return True

                if self.ciisyslevelmetricstyle is not None:
                    return True

                if self.ciisyslevelminlspgenint is not None:
                    return True

                if self.ciisysleveloriglspbuffsize is not None:
                    return True

                if self.ciisysleveloverloadstate is not None:
                    return True

                if self.ciisyslevelsetoverload is not None:
                    return True

                if self.ciisyslevelsetoverloaduntil is not None:
                    return True

                if self.ciisyslevelspfconsiders is not None:
                    return True

                if self.ciisyslevelteenabled is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiSysLevelTable.CiiSysLevelEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiSysLevelTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciisyslevelentry is not None:
                for child_ref in self.ciisyslevelentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiSysLevelTable']['meta_info']


    class CiiSysObject(object):
        """
        
        
        .. attribute:: ciisysadminstate
        
        	The administrative state of this Intermediate System.  Setting this object to the value 'on' when its current value is 'off' enables the Intermediate System
        	**type**\: :py:class:`CiiAdminState_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiAdminState_Enum>`
        
        .. attribute:: ciisysid
        
        	The ID for this Intermediate System. This value is appended to each of the area addresses to form the Network Entity Titles. The derivation of a value for this object is implementation\-specific.  Some implementations may automatically assign values and not permit an SNMP write, while others may require the value to be set manually
        	**type**\: str
        
        	**range:** 6
        
        .. attribute:: ciisysl2tol1leaking
        
        	If true, allow the router to leak L2 routes into L1
        	**type**\: bool
        
        .. attribute:: ciisysmaxage
        
        	Value to place in RemainingLifeTime field of the LSPs we generate. This should be at least 300 seconds greater than ciiSysMaxLSPGenInt
        	**type**\: int
        
        	**range:** 350..65535
        
        .. attribute:: ciisysmaxlspgenint
        
        	Maximum interval, in seconds, between generated LSPs by this Intermediate System. This object follows the resettingTimer behavior.  The value must be greater than any value configured for ciiSysLevelMinLSPGenInt, and should be at least 300 seconds less than ciiSysMaxAge
        	**type**\: int
        
        	**range:** 1..65235
        
        .. attribute:: ciisysmaxpathsplits
        
        	Maximum number of paths with equal routing metric value which it is permitted to split between. This object follows the replaceOnlyWhileDisabled behavior
        	**type**\: int
        
        	**range:** 1..32
        
        .. attribute:: ciisyspolleshellorate
        
        	The value, in seconds, to be used for the suggested ES configuration timer in ISH PDUs when soliciting the ES configuration
        	**type**\: int
        
        	**range:** 1..65535
        
        .. attribute:: ciisysreceivelspbuffersize
        
        	Size of the largest Buffer we are designed or configured to store.  This should be at least as big as the maximum ciiSysLevelOrigLSPBuffSize supported by the system.  If resources allow, we will store and flood LSPs larger than ciiSysReceiveLSPBufferSize, as this can help avoid problems in networks with different values for ciiSysLevelOrigLSPBuffSize
        	**type**\: int
        
        	**range:** 1492..16000
        
        .. attribute:: ciisystype
        
        	At which levels is the Intermediate System running? This object follows the replaceOnlyWhileDisabled behavior
        	**type**\: :py:class:`CiiSysType_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysObject.CiiSysType_Enum>`
        
        .. attribute:: ciisysversion
        
        	The version number of the IS\-IS protocol that is implemented
        	**type**\: :py:class:`CiiSysVersion_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysObject.CiiSysVersion_Enum>`
        
        .. attribute:: ciisyswaittime
        
        	Number of seconds to delay in 'waiting' state before entering 'on' state. This object follows the resettingTimer behavior
        	**type**\: int
        
        	**range:** 1..65535
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciisysadminstate = None
            self.ciisysid = None
            self.ciisysl2tol1leaking = None
            self.ciisysmaxage = None
            self.ciisysmaxlspgenint = None
            self.ciisysmaxpathsplits = None
            self.ciisyspolleshellorate = None
            self.ciisysreceivelspbuffersize = None
            self.ciisystype = None
            self.ciisysversion = None
            self.ciisyswaittime = None

        class CiiSysType_Enum(Enum):
            """
            CiiSysType_Enum

            At which levels is the Intermediate System
            running? This object follows the
            replaceOnlyWhileDisabled behavior.

            """

            LEVEL1IS = 1

            LEVEL2IS = 2

            LEVEL1L2IS = 3


            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiSysObject.CiiSysType_Enum']


        class CiiSysVersion_Enum(Enum):
            """
            CiiSysVersion_Enum

            The version number of the IS\-IS protocol that
            is implemented.

            """

            UNKNOWN = 0

            ONE = 1


            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiSysObject.CiiSysVersion_Enum']


        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiSysObject'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciisysadminstate is not None:
                return True

            if self.ciisysid is not None:
                return True

            if self.ciisysl2tol1leaking is not None:
                return True

            if self.ciisysmaxage is not None:
                return True

            if self.ciisysmaxlspgenint is not None:
                return True

            if self.ciisysmaxpathsplits is not None:
                return True

            if self.ciisyspolleshellorate is not None:
                return True

            if self.ciisysreceivelspbuffersize is not None:
                return True

            if self.ciisystype is not None:
                return True

            if self.ciisysversion is not None:
                return True

            if self.ciisyswaittime is not None:
                return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiSysObject']['meta_info']


    class CiiSysProtSuppTable(object):
        """
        This table contains the manually configured set of
        protocols supported by this Intermediate System.
        
        .. attribute:: ciisysprotsuppentry
        
        	Each entry contains one protocol supported by this Intermediate System
        	**type**\: list of :py:class:`CiiSysProtSuppEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSysProtSuppTable.CiiSysProtSuppEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciisysprotsuppentry = YList()
            self.ciisysprotsuppentry.parent = self
            self.ciisysprotsuppentry.name = 'ciisysprotsuppentry'


        class CiiSysProtSuppEntry(object):
            """
            Each entry contains one protocol supported by
            this Intermediate System.
            
            .. attribute:: ciisysprotsuppprotocol
            
            	One supported protocol. This object follows the index behavior
            	**type**\: :py:class:`CiiSupportedProtocol_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CiiSupportedProtocol_Enum>`
            
            .. attribute:: ciisysprotsuppexiststate
            
            	The state of the ciiSysProtSuppEntry. This object follows the RowStatus behavior
            	**type**\: :py:class:`RowStatus_Enum <ydk.models.snmpv2.SNMPv2_TC.RowStatus_Enum>`
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciisysprotsuppprotocol = None
                self.ciisysprotsuppexiststate = None

            @property
            def _common_path(self):
                if self.ciisysprotsuppprotocol is None:
                    raise YPYDataValidationError('Key property ciisysprotsuppprotocol is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiSysProtSuppTable/CISCO-IETF-ISIS-MIB:ciiSysProtSuppEntry[CISCO-IETF-ISIS-MIB:ciiSysProtSuppProtocol = ' + str(self.ciisysprotsuppprotocol) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciisysprotsuppprotocol is not None:
                    return True

                if self.ciisysprotsuppexiststate is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiSysProtSuppTable.CiiSysProtSuppEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiSysProtSuppTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciisysprotsuppentry is not None:
                for child_ref in self.ciisysprotsuppentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiSysProtSuppTable']['meta_info']


    class CiiSystemCounterTable(object):
        """
        System wide counters for this Intermediate System.
        
        .. attribute:: ciisystemcounterentry
        
        	System\-wide IS\-IS counters
        	**type**\: list of :py:class:`CiiSystemCounterEntry <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSystemCounterTable.CiiSystemCounterEntry>`
        
        

        """

        _prefix = 'cisco-ietf'
        _revision = '2005-08-16'

        def __init__(self):
            self.parent = None
            self.ciisystemcounterentry = YList()
            self.ciisystemcounterentry.parent = self
            self.ciisystemcounterentry.name = 'ciisystemcounterentry'


        class CiiSystemCounterEntry(object):
            """
            System\-wide IS\-IS counters.
            
            .. attribute:: ciisysstatlevel
            
            	The level that this entry describes
            	**type**\: :py:class:`CiiSysStatLevel_Enum <ydk.models.ietf.CISCO_IETF_ISIS_MIB.CISCOIETFISISMIB.CiiSystemCounterTable.CiiSystemCounterEntry.CiiSysStatLevel_Enum>`
            
            .. attribute:: ciisysstatattmpttoexmaxseqnums
            
            	Number of times the IS has attempted to exceed the maximum sequence number
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisysstatauthfails
            
            	The number of frames with authentication failures recognized by this Intermediate System
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisysstatauthtypefails
            
            	The number of frames with authentication type mismatches recognized by this Intermediate System
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisysstatcorrlsps
            
            	Number of corrupted in\-memory LSP frames detected.  LSPs received from the wire with a bad checksum are silently dropped and not counted.  LSPs received from the wire with parse errors are counted by ciiSysStatLSPErrors
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisysstatidfieldlenmismatches
            
            	Number of times a PDU is received with a different value for ID field length to that of the receiving system
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisysstatlspdbaseoloads
            
            	Number of times the LSP database has become overloaded
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisysstatlsperrors
            
            	Number of LSP frames with errors we have received
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisysstatmanaddrdropfromareas
            
            	Number of times a manual address has been dropped from the area
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisysstatownlsppurges
            
            	Number of times a zero\-aged copy of the system's own LSP is received from some other node
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisysstatpartchanges
            
            	Partition changes
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisysstatseqnumskips
            
            	Number of times a sequence number skip has occurred
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ciisysstatspfruns
            
            	Number of times we ran SPF at this level
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'cisco-ietf'
            _revision = '2005-08-16'

            def __init__(self):
                self.parent = None
                self.ciisysstatlevel = None
                self.ciisysstatattmpttoexmaxseqnums = None
                self.ciisysstatauthfails = None
                self.ciisysstatauthtypefails = None
                self.ciisysstatcorrlsps = None
                self.ciisysstatidfieldlenmismatches = None
                self.ciisysstatlspdbaseoloads = None
                self.ciisysstatlsperrors = None
                self.ciisysstatmanaddrdropfromareas = None
                self.ciisysstatownlsppurges = None
                self.ciisysstatpartchanges = None
                self.ciisysstatseqnumskips = None
                self.ciisysstatspfruns = None

            class CiiSysStatLevel_Enum(Enum):
                """
                CiiSysStatLevel_Enum

                The level that this entry describes.

                """

                LEVEL1IS = 1

                LEVEL2IS = 2


                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                    return meta._meta_table['CISCOIETFISISMIB.CiiSystemCounterTable.CiiSystemCounterEntry.CiiSysStatLevel_Enum']


            @property
            def _common_path(self):
                if self.ciisysstatlevel is None:
                    raise YPYDataValidationError('Key property ciisysstatlevel is None')

                return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiSystemCounterTable/CISCO-IETF-ISIS-MIB:ciiSystemCounterEntry[CISCO-IETF-ISIS-MIB:ciiSysStatLevel = ' + str(self.ciisysstatlevel) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.ciisysstatlevel is not None:
                    return True

                if self.ciisysstatattmpttoexmaxseqnums is not None:
                    return True

                if self.ciisysstatauthfails is not None:
                    return True

                if self.ciisysstatauthtypefails is not None:
                    return True

                if self.ciisysstatcorrlsps is not None:
                    return True

                if self.ciisysstatidfieldlenmismatches is not None:
                    return True

                if self.ciisysstatlspdbaseoloads is not None:
                    return True

                if self.ciisysstatlsperrors is not None:
                    return True

                if self.ciisysstatmanaddrdropfromareas is not None:
                    return True

                if self.ciisysstatownlsppurges is not None:
                    return True

                if self.ciisysstatpartchanges is not None:
                    return True

                if self.ciisysstatseqnumskips is not None:
                    return True

                if self.ciisysstatspfruns is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
                return meta._meta_table['CISCOIETFISISMIB.CiiSystemCounterTable.CiiSystemCounterEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB/CISCO-IETF-ISIS-MIB:ciiSystemCounterTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.ciisystemcounterentry is not None:
                for child_ref in self.ciisystemcounterentry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
            return meta._meta_table['CISCOIETFISISMIB.CiiSystemCounterTable']['meta_info']

    @property
    def _common_path(self):

        return '/CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return False

    def _has_data(self):
        if not self.is_config():
            return False
        if self.is_presence():
            return True
        if self.ciiareaaddrtable is not None and self.ciiareaaddrtable._has_data():
            return True

        if self.ciiareaaddrtable is not None and self.ciiareaaddrtable.is_presence():
            return True

        if self.ciicirc is not None and self.ciicirc._has_data():
            return True

        if self.ciicirc is not None and self.ciicirc.is_presence():
            return True

        if self.ciicircleveltable is not None and self.ciicircleveltable._has_data():
            return True

        if self.ciicircleveltable is not None and self.ciicircleveltable.is_presence():
            return True

        if self.ciicirctable is not None and self.ciicirctable._has_data():
            return True

        if self.ciicirctable is not None and self.ciicirctable.is_presence():
            return True

        if self.ciicircuitcountertable is not None and self.ciicircuitcountertable._has_data():
            return True

        if self.ciicircuitcountertable is not None and self.ciicircuitcountertable.is_presence():
            return True

        if self.ciiipratable is not None and self.ciiipratable._has_data():
            return True

        if self.ciiipratable is not None and self.ciiipratable.is_presence():
            return True

        if self.ciiisadjareaaddrtable is not None and self.ciiisadjareaaddrtable._has_data():
            return True

        if self.ciiisadjareaaddrtable is not None and self.ciiisadjareaaddrtable.is_presence():
            return True

        if self.ciiisadjipaddrtable is not None and self.ciiisadjipaddrtable._has_data():
            return True

        if self.ciiisadjipaddrtable is not None and self.ciiisadjipaddrtable.is_presence():
            return True

        if self.ciiisadjprotsupptable is not None and self.ciiisadjprotsupptable._has_data():
            return True

        if self.ciiisadjprotsupptable is not None and self.ciiisadjprotsupptable.is_presence():
            return True

        if self.ciiisadjtable is not None and self.ciiisadjtable._has_data():
            return True

        if self.ciiisadjtable is not None and self.ciiisadjtable.is_presence():
            return True

        if self.ciilspsummarytable is not None and self.ciilspsummarytable._has_data():
            return True

        if self.ciilspsummarytable is not None and self.ciilspsummarytable.is_presence():
            return True

        if self.ciilsptlvtable is not None and self.ciilsptlvtable._has_data():
            return True

        if self.ciilsptlvtable is not None and self.ciilsptlvtable.is_presence():
            return True

        if self.ciimanareaaddrtable is not None and self.ciimanareaaddrtable._has_data():
            return True

        if self.ciimanareaaddrtable is not None and self.ciimanareaaddrtable.is_presence():
            return True

        if self.ciipacketcountertable is not None and self.ciipacketcountertable._has_data():
            return True

        if self.ciipacketcountertable is not None and self.ciipacketcountertable.is_presence():
            return True

        if self.ciiratable is not None and self.ciiratable._has_data():
            return True

        if self.ciiratable is not None and self.ciiratable.is_presence():
            return True

        if self.ciiredistributeaddrtable is not None and self.ciiredistributeaddrtable._has_data():
            return True

        if self.ciiredistributeaddrtable is not None and self.ciiredistributeaddrtable.is_presence():
            return True

        if self.ciiroutertable is not None and self.ciiroutertable._has_data():
            return True

        if self.ciiroutertable is not None and self.ciiroutertable.is_presence():
            return True

        if self.ciisummaddrtable is not None and self.ciisummaddrtable._has_data():
            return True

        if self.ciisummaddrtable is not None and self.ciisummaddrtable.is_presence():
            return True

        if self.ciisysleveltable is not None and self.ciisysleveltable._has_data():
            return True

        if self.ciisysleveltable is not None and self.ciisysleveltable.is_presence():
            return True

        if self.ciisysobject is not None and self.ciisysobject._has_data():
            return True

        if self.ciisysobject is not None and self.ciisysobject.is_presence():
            return True

        if self.ciisysprotsupptable is not None and self.ciisysprotsupptable._has_data():
            return True

        if self.ciisysprotsupptable is not None and self.ciisysprotsupptable.is_presence():
            return True

        if self.ciisystemcountertable is not None and self.ciisystemcountertable._has_data():
            return True

        if self.ciisystemcountertable is not None and self.ciisystemcountertable.is_presence():
            return True

        return False

    def is_presence(self):
        ''' Returns True if this instance represents presence container else returns False '''
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _CISCO_IETF_ISIS_MIB as meta
        return meta._meta_table['CISCOIETFISISMIB']['meta_info']


