""" CISCO_ETHER_CFM_MIB 

This MIB module defines the managed objects 
and notifications for Ethernet Connectivity 
Fault Management (CFM).

CFM is an end\-to\-end per service instance Ethernet layer 
Operations, Administration and Management (OAM) protocol. 

CFM events include\: 

\- Maintenance End\-Point (MEP) coming up\: establishing 
  connectivity

\- Maintenance End\-Point going down\: losing connectivity

\- Maintenance End\-Point unknown\: unexpected

\- Maintenance End\-Point missing\: expected but not reachable

\- Continuity Check Configuration Error\: collision in MEP IDs

\- Continuity Check Loop\: forwarding loop in network

\- Continuity Check Cross\-connect\: cross\-connected 
  forwarding path.

The following acronyms are used in this module\:

\- MEP\: Maintenance End Point

\- MEPID\: Maintenance End Point Identifier

\- CC\: Continuity Check

\- CCDB\: Continuity Check Database

\- SVLAN\: Service Provider Virtual Local Area Network

\- VLAN\: Virtual Local Area Network

\- CLI\: Command Line Interface.

\- OAM\: Operations Administration and Management.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYDataValidationError




class CISCOETHERCFMMIB(object):
    """
    
    
    .. attribute:: ceccfmevents
    
    	
    	**type**\: :py:class:`CecCfmEvents <ydk.models.ether.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.CecCfmEvents>`
    
    .. attribute:: cethercfmeventtable
    
    	This table contains a collection of Ethernet CFM notifications generated by the device. The notifications correspond to events recognized by the device and fall into the following classes\:  \- MEP\-Up  \- MEP\-Down  \- Configuration Error  \- Forwarding Loop  \- Cross\-connected Ethernet Connection  \- Crosscheck Missing MEP  \- Crosscheck Unknown MEP  \- Crosscheck Service Up  A conceptual row is created in this table whenever the device  encounters one of the events listed above. Rows can only be created by the agent, and not at the request of the management station.  Rows are deleted at the request of a management station by  setting the cEtherCfmEventDeleteRow object to 'delete'. Another way of deleting rows is through the CLI.  Although this table may be indexed uniquely by the  cEtherCfmEventIndex index, the first two indices  (cEtherCfmEventDomainIndex and cEtherCfmEventSvlan) are used to speed\-up queries per maintenance domain and per customer service instance. Furthermore, these two indices will help in defining the MIB views easily in order to restrict access to the MIB to particular entities (be it a service provider, or operator, or customer)
    	**type**\: :py:class:`CEtherCfmEventTable <ydk.models.ether.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.CEtherCfmEventTable>`
    
    

    """

    _prefix = 'cisco-ether'
    _revision = '2004-12-28'

    def __init__(self):
        self.ceccfmevents = CISCOETHERCFMMIB.CecCfmEvents()
        self.ceccfmevents.parent = self
        self.cethercfmeventtable = CISCOETHERCFMMIB.CEtherCfmEventTable()
        self.cethercfmeventtable.parent = self


    class CEtherCfmEventTable(object):
        """
        This table contains a collection of Ethernet CFM notifications
        generated by the device. The notifications correspond to events
        recognized by the device and fall into the following classes\:
        
        \- MEP\-Up
        
        \- MEP\-Down
        
        \- Configuration Error
        
        \- Forwarding Loop
        
        \- Cross\-connected Ethernet Connection
        
        \- Crosscheck Missing MEP
        
        \- Crosscheck Unknown MEP
        
        \- Crosscheck Service Up
        
        A conceptual row is created in this table whenever the device 
        encounters one of the events listed above. Rows can only be
        created by the agent, and not at the request of the management
        station.
        
        Rows are deleted at the request of a management station by 
        setting the cEtherCfmEventDeleteRow object to 'delete'.
        Another way of deleting rows is through the CLI.
        
        Although this table may be indexed uniquely by the 
        cEtherCfmEventIndex index, the first two indices 
        (cEtherCfmEventDomainIndex and cEtherCfmEventSvlan) are used
        to speed\-up queries per maintenance domain and per customer
        service instance. Furthermore, these two indices will help
        in defining the MIB views easily in order to restrict access
        to the MIB to particular entities (be it a service provider,
        or operator, or customer).
        
        .. attribute:: cethercfmevententry
        
        	An entry in this table is created for every event reported by Ethernet CFM
        	**type**\: list of :py:class:`CEtherCfmEventEntry <ydk.models.ether.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.CEtherCfmEventTable.CEtherCfmEventEntry>`
        
        

        """

        _prefix = 'cisco-ether'
        _revision = '2004-12-28'

        def __init__(self):
            self.parent = None
            self.cethercfmevententry = YList()
            self.cethercfmevententry.parent = self
            self.cethercfmevententry.name = 'cethercfmevententry'


        class CEtherCfmEventEntry(object):
            """
            An entry in this table is created for every event reported
            by Ethernet CFM.
            
            .. attribute:: cethercfmeventdomainindex
            
            	This object represents the ID which uniquely identifies  a CFM maintenance domain on the device. Every domain can be uniquely identified by its user\-defined  name (cEtherCfmEventDomainName) or device\-assigned ID (this object)
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: cethercfmeventindex
            
            	A monotonically increasing integer for the sole purpose of indexing CFM events.  When it reaches the maximum value  supported by the agent, as defined in the  cEtherCfmMaxEventIndex object, the agent wraps the value back to 1 and may flush existing entries
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: cethercfmeventsvlan
            
            	The service VLAN identifier of the customer service  instance to which the event belongs
            	**type**\: int
            
            	**range:** 1..4094
            
            .. attribute:: cethercfmeventcode
            
            	This object is used in decoding 'mepUp' and 'mepDown' events.   \*\* For 'mepUp', the following codes are relevant\:      'new'           \- This is the very first time the device                        receives a CC message from the remote MEP.      'returning'     \- The device received a CC message from a                        remote MEP for which it had an expired                        CCDB entry.      'portState'     \- The device received a CC message from a                        remote MEP for which it has a valid CCDB                        entry, and the message indicates a port                        status change.  \*\* For 'mepDown', the following codes are relevant\:      'lastGasp'      \- The device received a CC message from a                       remote MEP with zero lifetime.      'timeout'       \- The local CCDB entry for the remote MEP                        expired.      'configClear'   \- A previous CC message from a MEP that                       triggered a configuration error event                       is cleared.          'loopClear'     \- A previous CC message from a MEP that                       triggered a loop error event is cleared.      'xconnectClear' \- A previous CC message from a MEP that                       triggered a crossconnect error event                        is cleared.      'unknownClear'  \- A previous CC message from a MEP that                       triggered an unknown MEP event is                        cleared
            	**type**\: :py:class:`CEtherCfmEventCode_Enum <ydk.models.ether.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.CEtherCfmEventTable.CEtherCfmEventEntry.CEtherCfmEventCode_Enum>`
            
            .. attribute:: cethercfmeventdeleterow
            
            	This object allows the management station to  delete a row in the cEtherCfmEventTable in order to free system resources.  When reading this object the value of 'noop' will be  returned. This object can only be set to 'delete'.   When this object is set to 'delete', the conceptual row corresponding to this object will be deleted to free system resources. This is equivalent to clearing the event log. Should the trigger that caused the event to be logged reoccur, the event will be re\-asserted but in a different conceptual row
            	**type**\: :py:class:`CEtherCfmEventDeleteRow_Enum <ydk.models.ether.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.CEtherCfmEventTable.CEtherCfmEventEntry.CEtherCfmEventDeleteRow_Enum>`
            
            .. attribute:: cethercfmeventdomainname
            
            	The name of the CFM maintenance domain
            	**type**\: str
            
            	**range:** 0..255
            
            .. attribute:: cethercfmeventlastchange
            
            	The value of sysUpTime at the time when this row was created
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: cethercfmeventlclifcount
            
            	The number of local interfaces affected by the event
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: cethercfmeventlclmacaddress
            
            	The MAC address of the device reporting the event
            	**type**\: str
            
            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
            
            .. attribute:: cethercfmeventlclmepcount
            
            	The number of local MEPs affected by the event
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: cethercfmeventlclmepid
            
            	The identifier of the local MEP impacted by the event
            	**type**\: int
            
            	**range:** 0..8191
            
            .. attribute:: cethercfmeventrmtmacaddress
            
            	The MAC address of the remote maintenance point for which the event entry is being logged
            	**type**\: str
            
            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
            
            .. attribute:: cethercfmeventrmtmepid
            
            	The maintenance end\-point identifier of the remote  MEP causing the event entry to be logged
            	**type**\: int
            
            	**range:** 0..8191
            
            .. attribute:: cethercfmeventrmtportstate
            
            	The operational state of the port on which the  remote MEP is configured. This information is  derived from the port\-state as indicated in the  CC message. The possible values are\:  'up'                    \- The port is operationally up.  'down'                  \- The port is operationally (but not                           administratively) down.  'adminDown'             \- The port is administratively down.  'test'                  \- The port is in test mode (perhaps                            due to an IEEE Standard 802.3ah OAM                           intrusive loopback operation).  'remoteExcessiveErrors' \- 802.3ah OAM reports that the other                            end of the link is receiving an                            excessive number of invalid frames.  'localExcessiveErrors'  \- 802.3ah OAM reports that this end of                           the link is receiving an excessive                            number of invalid frames.  'localNoData'           \- No data and no CFM messages have been                           received for an excessive length of                            time
            	**type**\: :py:class:`CEtherCfmEventRmtPortState_Enum <ydk.models.ether.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.CEtherCfmEventTable.CEtherCfmEventEntry.CEtherCfmEventRmtPortState_Enum>`
            
            .. attribute:: cethercfmeventrmtserviceid
            
            	The ID that the remote device has configured for the  customer service instance (VLAN)
            	**type**\: str
            
            	**range:** 1..100
            
            .. attribute:: cethercfmeventserviceid
            
            	The customer service instance to which the event belongs
            	**type**\: str
            
            	**range:** 1..100
            
            .. attribute:: cethercfmeventtype
            
            	This object informs the management station of how to interpret the rest of the objects within a row, as summarized in the  following table\:  Legend I\: Ignored Object         V\: Valid Object  Object                                 cEtherCfmEventType                                \| 1 \| 2 \| 3 \| 4 \| 5 \| 6 \| 7 \| 8 ================================================================                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventDomainIndex      \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventSvlan            \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventIndex            \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLastChange       \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventServiceId        \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventDomainName       \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLclMepid         \| I \| I \| I \| V \| V \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLclMacAddress    \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLclMepCount      \| V \| V \| I \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLclIfCount       \| V \| V \| I \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventRmtMepid         \| V \| V \| V \| I \| I \| V \| V \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventRmtMacAddress    \| V \| V \| V \| I \| V \| V \| V \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventRmtPortState     \| V \| I \| I \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventRmtServiceId     \| I \| I \| V \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventCode             \| V \| V \| I \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventDeleteRow        \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \|  Note\: When reading any ignored object, a value of 0 will  be returned by the agent
            	**type**\: :py:class:`CEtherCfmEventType_Enum <ydk.models.ether.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.CEtherCfmEventTable.CEtherCfmEventEntry.CEtherCfmEventType_Enum>`
            
            

            """

            _prefix = 'cisco-ether'
            _revision = '2004-12-28'

            def __init__(self):
                self.parent = None
                self.cethercfmeventdomainindex = None
                self.cethercfmeventindex = None
                self.cethercfmeventsvlan = None
                self.cethercfmeventcode = None
                self.cethercfmeventdeleterow = None
                self.cethercfmeventdomainname = None
                self.cethercfmeventlastchange = None
                self.cethercfmeventlclifcount = None
                self.cethercfmeventlclmacaddress = None
                self.cethercfmeventlclmepcount = None
                self.cethercfmeventlclmepid = None
                self.cethercfmeventrmtmacaddress = None
                self.cethercfmeventrmtmepid = None
                self.cethercfmeventrmtportstate = None
                self.cethercfmeventrmtserviceid = None
                self.cethercfmeventserviceid = None
                self.cethercfmeventtype = None

            class CEtherCfmEventCode_Enum(Enum):
                """
                CEtherCfmEventCode_Enum

                This object is used in decoding 'mepUp' and 'mepDown' events. 
                
                \*\* For 'mepUp', the following codes are relevant\:
                
                    'new'           \- This is the very first time the device 
                                      receives a CC message from the remote MEP.
                
                    'returning'     \- The device received a CC message from a 
                                      remote MEP for which it had an expired 
                                      CCDB entry.
                
                    'portState'     \- The device received a CC message from a 
                                      remote MEP for which it has a valid CCDB 
                                      entry, and the message indicates a port 
                                      status change.
                
                \*\* For 'mepDown', the following codes are relevant\:
                
                    'lastGasp'      \- The device received a CC message from a
                                      remote MEP with zero lifetime.
                
                    'timeout'       \- The local CCDB entry for the remote MEP 
                                      expired.
                
                    'configClear'   \- A previous CC message from a MEP that
                                      triggered a configuration error event
                                      is cleared.
                    
                    'loopClear'     \- A previous CC message from a MEP that
                                      triggered a loop error event is cleared.
                
                    'xconnectClear' \- A previous CC message from a MEP that
                                      triggered a crossconnect error event 
                                      is cleared.
                
                    'unknownClear'  \- A previous CC message from a MEP that
                                      triggered an unknown MEP event is 
                                      cleared.

                """

                NEW = 1

                RETURNING = 2

                PORTSTATE = 3

                LASTGASP = 4

                TIMEOUT = 5

                CONFIGCLEAR = 6

                LOOPCLEAR = 7

                XCONNECTCLEAR = 8

                UNKNOWNCLEAR = 9


                @staticmethod
                def _meta_info():
                    from ydk.models.ether._meta import _CISCO_ETHER_CFM_MIB as meta
                    return meta._meta_table['CISCOETHERCFMMIB.CEtherCfmEventTable.CEtherCfmEventEntry.CEtherCfmEventCode_Enum']


            class CEtherCfmEventDeleteRow_Enum(Enum):
                """
                CEtherCfmEventDeleteRow_Enum

                This object allows the management station to 
                delete a row in the cEtherCfmEventTable in order
                to free system resources.
                
                When reading this object the value of 'noop' will be 
                returned. This object can only be set to 'delete'. 
                
                When this object is set to 'delete', the conceptual
                row corresponding to this object will be deleted to
                free system resources. This is equivalent to clearing
                the event log. Should the trigger that caused the event
                to be logged reoccur, the event will be re\-asserted but
                in a different conceptual row.

                """

                NOOP = 1

                DELETE = 2


                @staticmethod
                def _meta_info():
                    from ydk.models.ether._meta import _CISCO_ETHER_CFM_MIB as meta
                    return meta._meta_table['CISCOETHERCFMMIB.CEtherCfmEventTable.CEtherCfmEventEntry.CEtherCfmEventDeleteRow_Enum']


            class CEtherCfmEventRmtPortState_Enum(Enum):
                """
                CEtherCfmEventRmtPortState_Enum

                The operational state of the port on which the 
                remote MEP is configured. This information is 
                derived from the port\-state as indicated in the 
                CC message. The possible values are\:
                
                'up'                    \- The port is operationally up.
                
                'down'                  \- The port is operationally (but not
                                          administratively) down.
                
                'adminDown'             \- The port is administratively down.
                
                'test'                  \- The port is in test mode (perhaps 
                                          due to an IEEE Standard 802.3ah OAM
                                          intrusive loopback operation).
                
                'remoteExcessiveErrors' \- 802.3ah OAM reports that the other 
                                          end of the link is receiving an 
                                          excessive number of invalid frames.
                
                'localExcessiveErrors'  \- 802.3ah OAM reports that this end of
                                          the link is receiving an excessive 
                                          number of invalid frames.
                
                'localNoData'           \- No data and no CFM messages have been
                                          received for an excessive length of 
                                          time.

                """

                UP = 1

                DOWN = 2

                ADMINDOWN = 3

                TEST = 4

                REMOTEEXCESSIVEERRORS = 5

                LOCALEXCESSIVEERRORS = 6

                LOCALNODATA = 7


                @staticmethod
                def _meta_info():
                    from ydk.models.ether._meta import _CISCO_ETHER_CFM_MIB as meta
                    return meta._meta_table['CISCOETHERCFMMIB.CEtherCfmEventTable.CEtherCfmEventEntry.CEtherCfmEventRmtPortState_Enum']


            class CEtherCfmEventType_Enum(Enum):
                """
                CEtherCfmEventType_Enum

                This object informs the management station of how to interpret
                the rest of the objects within a row, as summarized in the 
                following table\:
                
                Legend I\: Ignored Object 
                       V\: Valid Object
                
                Object                                 cEtherCfmEventType
                                               \| 1 \| 2 \| 3 \| 4 \| 5 \| 6 \| 7 \| 8
                ================================================================
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventDomainIndex      \| V \| V \| V \| V \| V \| V \| V \| V
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventSvlan            \| V \| V \| V \| V \| V \| V \| V \| V
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventIndex            \| V \| V \| V \| V \| V \| V \| V \| V
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventLastChange       \| V \| V \| V \| V \| V \| V \| V \| V
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventServiceId        \| V \| V \| V \| V \| V \| V \| V \| V
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventDomainName       \| V \| V \| V \| V \| V \| V \| V \| V
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventLclMepid         \| I \| I \| I \| V \| V \| I \| I \| I
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventLclMacAddress    \| V \| V \| V \| V \| V \| V \| V \| V
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventLclMepCount      \| V \| V \| I \| I \| I \| I \| I \| I
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventLclIfCount       \| V \| V \| I \| I \| I \| I \| I \| I
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventRmtMepid         \| V \| V \| V \| I \| I \| V \| V \| I
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventRmtMacAddress    \| V \| V \| V \| I \| V \| V \| V \| I
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventRmtPortState     \| V \| I \| I \| I \| I \| I \| I \| I
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventRmtServiceId     \| I \| I \| V \| I \| I \| I \| I \| I
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventCode             \| V \| V \| I \| I \| I \| I \| I \| I
                                               \|   \|   \|   \|   \|   \|   \|   \|
                cEtherCfmEventDeleteRow        \| V \| V \| V \| V \| V \| V \| V \| V
                                               \|   \|   \|   \|   \|   \|   \|   \|
                
                Note\: When reading any ignored object, a value of 0 will 
                be returned by the agent.

                """

                MEPUP = 1

                MEPDOWN = 2

                XCONNECT = 3

                LOOP = 4

                CONFIG = 5

                XCHECKMISSING = 6

                XCHECKUNKNOWN = 7

                XCHECKSERVICEUP = 8


                @staticmethod
                def _meta_info():
                    from ydk.models.ether._meta import _CISCO_ETHER_CFM_MIB as meta
                    return meta._meta_table['CISCOETHERCFMMIB.CEtherCfmEventTable.CEtherCfmEventEntry.CEtherCfmEventType_Enum']


            @property
            def _common_path(self):
                if self.cethercfmeventdomainindex is None:
                    raise YPYDataValidationError('Key property cethercfmeventdomainindex is None')
                if self.cethercfmeventindex is None:
                    raise YPYDataValidationError('Key property cethercfmeventindex is None')
                if self.cethercfmeventsvlan is None:
                    raise YPYDataValidationError('Key property cethercfmeventsvlan is None')

                return '/CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB/CISCO-ETHER-CFM-MIB:cEtherCfmEventTable/CISCO-ETHER-CFM-MIB:cEtherCfmEventEntry[CISCO-ETHER-CFM-MIB:cEtherCfmEventDomainIndex = ' + str(self.cethercfmeventdomainindex) + '][CISCO-ETHER-CFM-MIB:cEtherCfmEventIndex = ' + str(self.cethercfmeventindex) + '][CISCO-ETHER-CFM-MIB:cEtherCfmEventSvlan = ' + str(self.cethercfmeventsvlan) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.is_presence():
                    return True
                if self.cethercfmeventdomainindex is not None:
                    return True

                if self.cethercfmeventindex is not None:
                    return True

                if self.cethercfmeventsvlan is not None:
                    return True

                if self.cethercfmeventcode is not None:
                    return True

                if self.cethercfmeventdeleterow is not None:
                    return True

                if self.cethercfmeventdomainname is not None:
                    return True

                if self.cethercfmeventlastchange is not None:
                    return True

                if self.cethercfmeventlclifcount is not None:
                    return True

                if self.cethercfmeventlclmacaddress is not None:
                    return True

                if self.cethercfmeventlclmepcount is not None:
                    return True

                if self.cethercfmeventlclmepid is not None:
                    return True

                if self.cethercfmeventrmtmacaddress is not None:
                    return True

                if self.cethercfmeventrmtmepid is not None:
                    return True

                if self.cethercfmeventrmtportstate is not None:
                    return True

                if self.cethercfmeventrmtserviceid is not None:
                    return True

                if self.cethercfmeventserviceid is not None:
                    return True

                if self.cethercfmeventtype is not None:
                    return True

                return False

            def is_presence(self):
                ''' Returns True if this instance represents presence container else returns False '''
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ether._meta import _CISCO_ETHER_CFM_MIB as meta
                return meta._meta_table['CISCOETHERCFMMIB.CEtherCfmEventTable.CEtherCfmEventEntry']['meta_info']

        @property
        def _common_path(self):

            return '/CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB/CISCO-ETHER-CFM-MIB:cEtherCfmEventTable'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.cethercfmevententry is not None:
                for child_ref in self.cethercfmevententry:
                    if child_ref._has_data():
                        return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ether._meta import _CISCO_ETHER_CFM_MIB as meta
            return meta._meta_table['CISCOETHERCFMMIB.CEtherCfmEventTable']['meta_info']


    class CecCfmEvents(object):
        """
        
        
        .. attribute:: cethercfmmaxeventindex
        
        	This object specifies the maximum upper value supported  for the cEtherCfmEventIndex index by this agent
        	**type**\: int
        
        	**range:** 1..4294967295
        
        

        """

        _prefix = 'cisco-ether'
        _revision = '2004-12-28'

        def __init__(self):
            self.parent = None
            self.cethercfmmaxeventindex = None

        @property
        def _common_path(self):

            return '/CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB/CISCO-ETHER-CFM-MIB:cecCfmEvents'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.is_presence():
                return True
            if self.cethercfmmaxeventindex is not None:
                return True

            return False

        def is_presence(self):
            ''' Returns True if this instance represents presence container else returns False '''
            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ether._meta import _CISCO_ETHER_CFM_MIB as meta
            return meta._meta_table['CISCOETHERCFMMIB.CecCfmEvents']['meta_info']

    @property
    def _common_path(self):

        return '/CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return False

    def _has_data(self):
        if not self.is_config():
            return False
        if self.is_presence():
            return True
        if self.ceccfmevents is not None and self.ceccfmevents._has_data():
            return True

        if self.ceccfmevents is not None and self.ceccfmevents.is_presence():
            return True

        if self.cethercfmeventtable is not None and self.cethercfmeventtable._has_data():
            return True

        if self.cethercfmeventtable is not None and self.cethercfmeventtable.is_presence():
            return True

        return False

    def is_presence(self):
        ''' Returns True if this instance represents presence container else returns False '''
        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ether._meta import _CISCO_ETHER_CFM_MIB as meta
        return meta._meta_table['CISCOETHERCFMMIB']['meta_info']


